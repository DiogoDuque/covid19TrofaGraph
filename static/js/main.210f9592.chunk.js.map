{"version":3,"sources":["model/PortugalEntries.tsx","model/Entry.tsx","utils/fetchData.tsx","utils/chartUtils.tsx","chart/DefaultLine.js","config/themes.js","chart/ConfirmedCasesCharts.js","chart/NewCasesCharts.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["PortugalEntries","confirmedPt","confirmedNorth","_confirmedPt","_confirmedNorth","this","Entry","date","count","_dateStr","_count","parseInt","isNaN","_getDataFromSource","sourceFile","url","headers","Headers","console","log","fetch","method","getTownData","town","callback","then","response","status","text","responseData","entries","stream","Readable","push","pipe","Csv","on","data","catch","err","error","getPortugalData","northConfirmedEntries","ptConfirmedEntries","confirmados_arsnorte","confirmados","filterLastNDays","n","size","length","slice","getChartData","label","chosenTheme","datasets","fill","lineTension","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","map","entry","labels","dateStr","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","chartWrapper","chartElement","classes","Grid","item","xs","className","chartContainer","DefaultLine","datapointsCount","theme","lastNEntries","min","Math","e","max","diff","round","options","themeCyan","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","themeYellow","ConfirmedCasesCharts","trofaEntries","ptEntries","Typography","variant","style","textAlign","gutterBottom","container","spacing","NewCasesCharts","newCasesEntries","prevEntry","i","currEntry","processCaseCount2NewCases","useStyles","makeStyles","root","flexGrow","marginLeft","marginRight","position","margin","height","width","App","useState","setTrofaEntries","setPtEntries","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.210f9592.chunk.js","sourcesContent":["import Entry from \"./Entry\";\n\nexport default class PortugalEntries {\n  _confirmedPt: Entry[];\n  _confirmedNorth: Entry[];\n\n  constructor(confirmedPt: Entry[] = [], confirmedNorth: Entry[] = []) {\n    this._confirmedPt = confirmedPt;\n    this._confirmedNorth = confirmedNorth;\n  }\n\n  get confirmedPt(): Entry[] {\n    return this._confirmedPt;\n  }\n\n  get confirmedNorth(): Entry[] {\n    return this._confirmedNorth;\n  }\n}\n","\nfunction strToDate(str: string) {\n  const dateParts = str.split('-');\n  return new Date(\n    parseInt(dateParts[2]),   // year\n    parseInt(dateParts[1])-1, // month, zero-indexed\n    parseInt(dateParts[0]),   // day\n    );\n}\n\nexport default class Entry {\n  _dateStr: string;\n  // _date: Date;\n  _count: number;\n\n  constructor(date: string, count: string|number) {\n    this._dateStr = date;\n    // this._date = strToDate(date);\n\n    this._count = typeof count === 'number' ? count : parseInt(count);\n\n    if(isNaN(this._count))\n      this._count = 0;\n  }\n\n  get dateStr(): string {\n    return this._dateStr;\n  }\n\n\n  get count(): number {\n    return this._count;\n  }\n}","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport Entry from '../model/Entry';\nimport PortugalEntries from '../model/PortugalEntries';\n\nfunction _getDataFromSource(sourceFile: string): Promise<Response> {\n  const url = 'https://cors-anywhere.herokuapp.com/https://github.com/dssg-pt/covid19pt-data/raw/master/'+sourceFile;\n  const headers: Headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Origin': 'https://github.com',\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    // 'Access-Control-Allow-Origin': '*',\n  });\n  console.log('Fetching '+sourceFile);\n  return fetch(url, { method: 'GET', headers });\n}\n\nexport function getTownData(town: string, callback: Function) {\n  _getDataFromSource('data_concelhos.csv')\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const entries: Entry[] = [];\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => entries.push(new Entry(data.data, data[town])))\n        .on('end', () => callback(entries));\n    })\n    .catch(err => console.error(err));\n}\n\nexport function getPortugalData(callback: Function) {\n  _getDataFromSource('data.csv')\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const northConfirmedEntries: Entry[] = [];\n      const ptConfirmedEntries: Entry[] = [];\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => {\n          northConfirmedEntries.push(new Entry(data.data, data.confirmados_arsnorte));\n          ptConfirmedEntries.push(new Entry(data.data, data.confirmados));\n        })\n        .on('end', () => callback(new PortugalEntries(ptConfirmedEntries, northConfirmedEntries)));\n    })\n    .catch(err => console.error(err));\n}\n\nexport default {\n  getTownData,\n  getPortugalData,\n}","import Entry from \"../model/Entry\";\nimport React from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nexport function filterLastNDays(entries: Entry[], n: number) {\n  const size = entries.length;\n  if(size <= n)\n    return entries;\n  return entries.slice(size-n);\n}\n\nexport function getChartData(entries: Entry[], label: string, chosenTheme: object) {\n  return {\n    datasets: [{\n      label,\n      fill: true,\n      lineTension: 0.1,\n      pointBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      data: entries.map(entry => entry.count),\n      ...chosenTheme,\n    }],\n    labels: entries.map(entry => entry.dateStr),\n  }\n}\n\nexport function getChartOptions(beginAtZero=false, suggestedMin=null, suggestedMax=null) {\n  return {\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero,\n          suggestedMin,\n          suggestedMax,\n        }\n      }]\n    },\n  }\n}\n\nexport function chartWrapper(chartElement: JSX.Element, classes: any): JSX.Element {\n  return (\n    <Grid item xs={12}>\n      <div className={classes.chartContainer}>\n        {chartElement}\n      </div>\n    </Grid>\n  );\n}\n\nexport default {\n  filterLastNDays,\n  getChartData,\n  getChartOptions,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../model/Entry';\nimport { filterLastNDays, getChartOptions, getChartData } from '../utils/chartUtils';\n\nconst DefaultLine = ({ data, datapointsCount, label, theme }) => {\n  const lastNEntries = filterLastNDays(data, datapointsCount);\n  const min = Math.min(...lastNEntries.map(e=>e.count));\n  const max = Math.max(...lastNEntries.map(e=>e.count));\n  const diff = Math.max(max - min, 20);\n  const suggestedMin = Math.max(Math.round(min - diff/10),0);\n  const suggestedMax = Math.round(max + diff/10);\n  return (\n    <Line\n      data={getChartData(lastNEntries, `${label} (${datapointsCount} dias)`, theme)}\n      options={getChartOptions(false, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nDefaultLine.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  datapointsCount: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired,\n};\n\nexport default DefaultLine;\n","export const themeCyan = {\n  backgroundColor: 'rgba(75,192,192,0.4)',\n  borderColor: 'rgba(75,192,192,1)',\n  pointBorderColor: 'rgba(75,192,192,1)',\n  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n}\n\nexport const themeMagenta = {\n  backgroundColor: 'rgba(192,75,192,0.4)',\n  borderColor: 'rgba(192,75,192,1)',\n  pointBorderColor: 'rgba(192,75,192,1)',\n  pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n}\n\nexport const themeYellow = {\n  backgroundColor: 'rgba(192,192,75,0.4)',\n  borderColor: 'rgba(192,192,75,1)',\n  pointBorderColor: 'rgba(192,192,75,1)',\n  pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n}\n\nexport default {\n  themeCyan,\n  themeMagenta,\n  themeYellow,\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Typography, Grid } from \"@material-ui/core\";\nimport { chartWrapper } from \"../utils/chartUtils\";\nimport DefaultLine from \"./DefaultLine\";\nimport { themeCyan } from \"../config/themes\";\nimport Entry from \"../model/Entry\";\nimport PortugalEntries from \"../model/PortugalEntries\";\n\nconst ConfirmedCasesCharts = ({ trofaEntries, ptEntries, classes }) => {\n  return (\n    <div>\n      <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n        Casos confirmados\n      </Typography>\n      <Grid container spacing={3}>\n        {chartWrapper(<DefaultLine\n          data={trofaEntries}\n          datapointsCount={30}\n          label=\"Casos confirmados na Trofa\"\n          theme={themeCyan}\n        />, classes)}\n        {chartWrapper(<DefaultLine\n          data={ptEntries.confirmedNorth}\n          datapointsCount={30}\n          label=\"Casos confirmados no Norte\"\n          theme={themeCyan}\n        />, classes)}\n        {chartWrapper(<DefaultLine\n          data={ptEntries.confirmedPt}\n          datapointsCount={30}\n          label=\"Casos confirmados em Portugal\"\n          theme={themeCyan}\n        />, classes)}\n        {chartWrapper(<DefaultLine\n          data={ptEntries.confirmedPt}\n          datapointsCount={90}\n          label=\"Casos confirmados em Portugal\"\n          theme={themeCyan}\n        />, classes)}\n      </Grid>\n    </div>\n  );\n}\n\nConfirmedCasesCharts.propTypes = {\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default ConfirmedCasesCharts;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Typography, Grid } from \"@material-ui/core\";\nimport { chartWrapper } from \"../utils/chartUtils\";\nimport DefaultLine from \"./DefaultLine\";\nimport { themeYellow } from \"../config/themes\";\nimport Entry from \"../model/Entry\";\nimport PortugalEntries from \"../model/PortugalEntries\";\n\nfunction processCaseCount2NewCases(entries) {\n  const newCasesEntries = [];\n  let prevEntry = entries[0];\n  for(let i=1; i<entries.length; i++) {\n    const currEntry = entries[i];\n    newCasesEntries.push(new Entry(currEntry.dateStr, currEntry.count - prevEntry.count));\n    prevEntry = currEntry;\n  }\n  return newCasesEntries;\n}\n\nconst NewCasesCharts = ({ trofaEntries, ptEntries, classes }) => {\n  trofaEntries = processCaseCount2NewCases(trofaEntries);\n\n  return (\n    <div>\n      <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n        Casos novos\n      </Typography>\n      <Grid container spacing={3}>\n        {chartWrapper(<DefaultLine\n          data={trofaEntries}\n          datapointsCount={30}\n          label=\"Casos novos na Trofa\"\n          theme={themeYellow}\n        />, classes)}\n        {chartWrapper(<DefaultLine\n          data={ptEntries.confirmedNorth}\n          datapointsCount={30}\n          label=\"Casos novos no Norte\"\n          theme={themeYellow}\n        />, classes)}\n        {chartWrapper(<DefaultLine\n          data={ptEntries.confirmedPt}\n          datapointsCount={30}\n          label=\"Casos novos em Portugal\"\n          theme={themeYellow}\n        />, classes)}\n        {chartWrapper(<DefaultLine\n          data={ptEntries.confirmedPt}\n          datapointsCount={90}\n          label=\"Casos novos em Portugal\"\n          theme={themeYellow}\n        />, classes)}\n      </Grid>\n    </div>\n  );\n}\n\nNewCasesCharts.propTypes = {\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default NewCasesCharts;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PortugalEntries from './model/PortugalEntries';\nimport Entry from './model/Entry';\nimport { getTownData, getPortugalData } from './utils/fetchData';\nimport ConfirmedCasesCharts from './chart/ConfirmedCasesCharts';\nimport NewCasesCharts from './chart/NewCasesCharts';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 10,\n    marginRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '50vh',\n    width: '90vw',\n  },\n}));\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  const classes = useStyles();\n\n  const [trofaEntries, setTrofaEntries]: [Entry[], Function] = useState([]);\n\n  const [ptEntries, setPtEntries]: [PortugalEntries, Function] = useState(new PortugalEntries());\n\n  useEffect(() => {\n    getTownData('TROFA', setTrofaEntries);\n    getPortugalData(setPtEntries);\n    //setIsFetching(false);\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <ConfirmedCasesCharts trofaEntries={trofaEntries} ptEntries={ptEntries} classes={classes} />\n      <NewCasesCharts trofaEntries={trofaEntries} ptEntries={ptEntries} classes={classes} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}