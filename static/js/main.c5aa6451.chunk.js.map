{"version":3,"sources":["model/Entry.tsx","model/EntriesAggregator.tsx","utils/fetchData.tsx","utils/EntriesOps.tsx","utils/chartUtils.tsx","chart/templates/MultiLineChart.js","config/themes.js","chart/NewCasesCharts.js","chart/templates/DefaultLineChart.js","chart/GeneralCharts.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Entry","date","count","_dateStr","_date","_count","this","dateStr","parts","split","Date","Number","strToDate","parseInt","isNaN","KEY","EntriesAggregator","name","_name","key","console","warn","EntriesAggregatorImpl","builder","_aggregationMap","_aggregator","entries","length","EntriesAggregatorBuilder","entry","current","_getDataFromSource","sourceFile","url","headers","Headers","Accept","log","fetch","method","getAdaptativePointRadius","width","window","screen","availWidth","densityValue","Math","max","getEntriesSince","dateRange","dateLimit","setDate","getDate","getDateLimitFromRange","filter","e","smoothEntryValues","strength","map","index","startIndex","finishIndex","min","relevantEntries","slice","sum","reduce","acc","round","getChartData","label","chosenTheme","datasets","categoryPercentage","barPercentage","lineTension","borderWidth","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","pointRadius","data","labels","getMultipleChartData","entriesArray","chosenThemes","Array","from","keys","i","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","chartWrapper","chartElement","classes","Grid","item","xs","className","chartContainer","chartGroupWrapper","title","components","Typography","variant","style","textAlign","gutterBottom","container","spacing","component","MultiLineChart","dataArray","themes","zeroBased","lastNEntriesArray","d","lastEntriesFlat","flatMap","eArr","offset","error","options","defaultProps","getThemeFromRGB","r","g","b","hasBackground","otherOptions","unified","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","themeMagenta","themeMagentaLight","themeMagentaDark","themeYellow","themeGreyTransparent","pointHitRadius","borderDash","severityTheme1","severityTheme2","severityTheme3","NewCasesCharts","trofaEntries","ptEntries","trofaLineGenerator","getAll","v","northEntries","prevEntry","newCasesEntries","currEntry","push","derivateEntryValues","DefaultLineChart","theme","lastNEntries","margin","GeneralCharts","useStyles","makeStyles","root","flexGrow","display","padding","paddingRight","position","height","progress","float","appBar","maxWidth","marginBottom","formControl","App","useState","isFetching","setIsFetching","setDateRange","setTrofaEntries","setPtEntries","lastTownUpdate","lastPtUpdate","getLast","useEffect","town","callback","filename","then","response","status","text","responseData","stream","Readable","pipe","Csv","on","concelho","addEntry","incidencia","tendencia_desc","build","catch","err","getTownData","confirmados","confirmados_arsnorte","confirmados_novos","ativos","internados","internados_enfermaria","internados_uci","getPortugalData","CircularProgress","AppBar","FormControl","InputLabel","id","Select","labelId","value","onChange","target","MenuItem","Card","CardContent","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c5aa6451.chunk.js","sourcesContent":["function strToDate(dateStr: string): Date {\n  const parts = dateStr.split('-');\n  return new Date(Number(parts[2]), Number(parts[1])-1, Number(parts[0]));\n}\n\nexport function dateToStr(date: Date): string {\n  return `${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;\n}\n\nexport default class Entry {\n  _dateStr: string;\n  _date: Date;\n  _count: number;\n\n  constructor(date: string, count: string|number) {\n    this._dateStr = date;\n    this._date = strToDate(date);\n\n    this._count = typeof count === 'number' ? count : parseInt(count);\n\n    if(isNaN(this._count))\n      this._count = 0;\n  }\n\n  get dateStr(): string {\n    return this._dateStr;\n  }\n\n  get date(): Date {\n    return this._date;\n  }\n\n  get count(): number {\n    return this._count;\n  }\n}","import Entry from './Entry';\n\nexport const KEY = {\n  CONFIRMED_PT: 'CONFIRMED_PT',\n  CONFIRMED_NORTH: 'CONFIRMED_NORTH',\n  NEWCASES_PT: 'NEWCASES_PT',\n  ACTIVE_PT: 'ACTIVE_PT',\n  HOSPITALIZED: 'HOSPITALIZED',\n  HOSPITALIZED_NURSERY: 'HOSPITALIZED_NURSERY',\n  HOSPITALIZED_ICU: 'HOSPITALIZED_ICU',\n  TOWN_INCIDENCE: 'TOWN_INCIDENCE',\n  TOWN_INCIDENCE_TENDENCY: 'TOWN_INCIDENCE_TENDENCY',\n}\n\nexport class EntriesAggregator {\n  _name: string;\n  constructor(name: string) {\n    this._name = name;\n  }\n  getAll(key: string): Entry[] {\n    console.warn(`The EntriesAggregator '${this._name}' was not properly instantiated and is trying to call getAll!`);\n    return [];\n  }\n  getLast(key: string): Entry {\n    console.warn(`The EntriesAggregator '${this._name}' was not properly instantiated and is trying to call getLastEntry!`);\n    return new Entry('', 0);\n  }\n}\n\nclass EntriesAggregatorImpl extends EntriesAggregator {\n  _aggregationMap: {[key: string]: Entry[]};\n\n  constructor(builder: EntriesAggregatorBuilder) {\n    super(builder.name);\n    this._aggregationMap = builder._aggregator;\n  }\n\n  getAll(key: string): Entry[] {\n    return this._aggregationMap[key] || [];\n  }\n\n  getLast(key: string): Entry {\n    const entries = this._aggregationMap[key];\n    return entries[entries.length - 1];\n  }\n}\n\nexport class EntriesAggregatorBuilder {\n  _name: string;\n  _aggregator: {[key: string]: Entry[]};\n\n  constructor(name: string) {\n    this._name = name;\n    this._aggregator = {};\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  addEntry(key: string, entry: Entry) {\n    const current = this._aggregator[key] || [];\n    this._aggregator[key] = [...current, entry];\n    return this;\n  }\n\n  build() {\n    return new EntriesAggregatorImpl(this);\n  }\n}","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport Entry from '../model/Entry';\nimport { EntriesAggregatorBuilder, KEY } from '../model/EntriesAggregator';\n\nfunction _getDataFromSource(sourceFile: string): Promise<Response> {\n  const url = 'https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/' + sourceFile;\n  const headers: Headers = new Headers({\n    //'Content-Type': 'application/x-www-form-urlencoded',\n    //'Origin': 'https://github.com',\n    //'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    Accept: 'application/vnd.github.v3+json',\n    // 'Access-Control-Allow-Origin': '*',\n  });\n  console.log('[_getDataFromSource] Fetching ' + sourceFile);\n  return fetch(url, { method: 'GET', headers });\n}\n\nexport function getTownData(town: string, callback: Function) {\n  const filename = 'data_concelhos_new.csv';\n  _getDataFromSource(filename)\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const builder = new EntriesAggregatorBuilder(filename);\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data =>\n          data.concelho === town\n          && builder\n            .addEntry(KEY.TOWN_INCIDENCE, new Entry(data.data, data.incidencia))\n            .addEntry(KEY.TOWN_INCIDENCE_TENDENCY, new Entry(data.data, data.tendencia_desc)))\n        .on('end', () => callback(builder.build()));\n    })\n    .catch(err => console.error(err));\n}\n\nexport function getPortugalData(callback: Function) {\n  const filename = 'data.csv';\n  _getDataFromSource(filename)\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const builder = new EntriesAggregatorBuilder(filename);\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => {\n          builder\n            .addEntry(KEY.CONFIRMED_PT, new Entry(data.data, data.confirmados))\n            .addEntry(KEY.CONFIRMED_NORTH, new Entry(data.data, data.confirmados_arsnorte))\n            .addEntry(KEY.NEWCASES_PT, new Entry(data.data, data.confirmados_novos))\n            .addEntry(KEY.ACTIVE_PT, new Entry(data.data, data.ativos))\n            .addEntry(KEY.HOSPITALIZED, new Entry(data.data, data.internados))\n            .addEntry(KEY.HOSPITALIZED_NURSERY, new Entry(data.data, data.internados_enfermaria))\n            .addEntry(KEY.HOSPITALIZED_ICU, new Entry(data.data, data.internados_uci))\n        })\n        .on('end', () => callback(builder.build()));\n    })\n    .catch(err => console.error(err));\n}\n","import Entry from \"../model/Entry\";\n\n\nexport function getAdaptativePointRadius(entries: Entry[]): number {\n  const width = window.screen.availWidth;\n  const count = entries.length;\n  const densityRatio = count/width;\n  const densityValue = densityRatio*12;\n  const retVal = Math.max(4-densityValue, 1);\n  return retVal;\n}\n\nfunction getDateLimitFromRange(dateRange: number): Date {\n  const dateLimit = new Date();\n  dateLimit.setDate(dateLimit.getDate() - dateRange);\n  return dateLimit;\n}\n\nexport function getEntriesLineGenerator(entries: Entry[]): (v: number) => Entry[] {\n  return v => entries.map(e => new Entry(e.dateStr, v));\n}\n\nexport function getEntriesSince(dateRange: number, entries: Entry[]): Entry[] {\n  const dateLimit = getDateLimitFromRange(dateRange);\n  return entries.filter(e => e.date >= dateLimit);\n}\n\nexport function derivateEntryValues(entries: Entry[]): Entry[] {\n  let prevEntry = entries[0];\n  const newCasesEntries = [new Entry(prevEntry.dateStr, 0)];\n\n  for(let i=1; i<entries.length; i++) {\n    const currEntry = entries[i];\n    newCasesEntries.push(new Entry(currEntry.dateStr, currEntry.count - prevEntry.count));\n    prevEntry = currEntry;\n  }\n\n  return newCasesEntries;\n}\n\nexport function smoothEntryValues(entries: Entry[], strength: number = 7) {\n  return entries.map((entry, index) => {\n    const startIndex = Math.max(0, index-strength);\n    const finishIndex = Math.min(entries.length, index+strength);\n    const relevantEntries = entries.slice(startIndex, finishIndex);\n    const sum = relevantEntries.reduce((acc, e) => acc + e.count, 0);\n    return new Entry(entry.dateStr, Math.round(sum / relevantEntries.length));\n  });\n}\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Entry from \"../model/Entry\";\nimport { getAdaptativePointRadius } from './EntriesOps';\n\n/** CHART ARGUMENTS */\n\nexport const getChartData = (entries: Entry[], label: string, chosenTheme: object) => ({\n  datasets: [{\n    label,\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entries),\n    data: entries.map(entry => entry.count),\n    ...chosenTheme,\n  }],\n  labels: entries.map(entry => entry.dateStr),\n});\n\nexport const getMultipleChartData = (entriesArray: Entry[][], labels: string[], chosenThemes: object[]) => ({\n  datasets: Array.from(Array(entriesArray.length).keys()).map(i => ({\n    label: labels[i],\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entriesArray[i]),\n    data: entriesArray[i].map(entry => entry.count),\n    ...chosenThemes[i],\n  })),\n  labels: entriesArray[0].map(entry => entry.dateStr),\n});\n\nexport const getChartOptions = (beginAtZero=false, suggestedMin=null, suggestedMax=null) => ({\n  maintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      ticks: {\n        beginAtZero,\n        suggestedMin,\n        suggestedMax,\n      }\n    }]\n  },\n});\n\n/** CHART WRAPPERS */\n\nlet key=0;\nexport const chartWrapper = (chartElement: JSX.Element, classes: any): JSX.Element => (\n  <Grid item xs={12} key={key++}>\n    <div className={classes.chartContainer}>\n      {chartElement}\n    </div>\n  </Grid>\n);\n\nexport const chartGroupWrapper = (title: String, classes: any, ...components: JSX.Element[]) => (\n  <div>\n    <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n      {title}\n    </Typography>\n    <Grid container spacing={3}>\n      {components.map(component => chartWrapper(component, classes))}\n    </Grid>\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getChartOptions, getMultipleChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst MultiLineChart = ({ dataArray, dateRange, labels, themes, zeroBased }) => {\n  const lastNEntriesArray = dataArray.map(d=>getEntriesSince(dateRange, d));\n  const lastEntriesFlat = lastNEntriesArray.flatMap(eArr=>eArr.map(e=>e.count));\n  const min = Math.min(...lastEntriesFlat);\n  const max = Math.max(...lastEntriesFlat);\n  const offset = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + offset);\n\n  let suggestedMin = Math.round(min - offset);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  if(dataArray.length !== labels.length || labels.length !== themes.length) {\n    console.error('Chart arguments cardinality did not match!');\n    return <Line options={getChartOptions(false, suggestedMin, suggestedMax)}/>\n  }\n  return (\n    <Line\n      data={getMultipleChartData(lastNEntriesArray, labels, themes)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nMultiLineChart.propTypes = {\n  dataArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(Entry))).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string.isRequired),\n  themes: PropTypes.arrayOf(PropTypes.object.isRequired),\n  zeroBased: PropTypes.bool,\n};\n\nMultiLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default MultiLineChart;\n","function getThemeFromRGB(r,g,b, hasBackground=true, otherOptions={}) {\n  const unified = `${r},${g},${b}`;\n  return {\n    backgroundColor: hasBackground ? `rgba(${unified},0.4)` : 'rgba(0,0,0,0)',\n    borderColor: `rgba(${unified},1)`,\n    pointBorderColor: `rgba(${unified},1)`,\n    pointHoverBackgroundColor: `rgba(${unified},1)`,\n    ...otherOptions,\n  }\n}\n\nexport const themeCyan = getThemeFromRGB(75, 192, 192);\n\nexport const themeMagenta = getThemeFromRGB(192, 75, 192);\n\nexport const themeMagentaLight = getThemeFromRGB(217, 128, 217);\n\nexport const themeMagentaDark = getThemeFromRGB(140, 83, 140);\n\nexport const themeYellow = getThemeFromRGB(192, 192, 75);\n\nexport const themeGreyTransparent = getThemeFromRGB(200, 200, 200, false, {pointRadius:0, pointHitRadius:0, borderDash:[8]});\n\nexport const severityTheme1 = getThemeFromRGB(255, 189, 0, false);\n\nexport const severityTheme2 = getThemeFromRGB(255, 84, 0, false);\n\nexport const severityTheme3 = getThemeFromRGB(158, 0, 89, false);\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { chartGroupWrapper } from \"../utils/chartUtils\";\nimport { getEntriesLineGenerator, smoothEntryValues, derivateEntryValues } from '../utils/EntriesOps';\nimport MultiLineChart from \"./templates/MultiLineChart\";\nimport { themeYellow, themeGreyTransparent, severityTheme1, severityTheme2, severityTheme3 } from \"../config/themes\";\nimport { EntriesAggregator, KEY } from \"../model/EntriesAggregator\";\n\nconst NewCasesCharts = ({ trofaEntries, ptEntries, dateRange, classes }) => {\n  const trofaLineGenerator = getEntriesLineGenerator(trofaEntries.getAll(KEY.TOWN_INCIDENCE));\n  const northEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_NORTH));\n  return chartGroupWrapper('Casos novos', classes,\n\n    // #### TROFA ####\n    <MultiLineChart\n      dataArray={[\n        trofaEntries.getAll(KEY.TOWN_INCIDENCE), trofaLineGenerator(240),\n        trofaLineGenerator(480), trofaLineGenerator(960),\n      ]}\n      dateRange={dateRange}\n      labels={[\n        'Incidência na Trofa (a 14 dias p/ 100k hab.)', 'Risco elevado',\n        'Risco muito elevado', 'Risco extremamente elevado'\n      ]}\n      themes={[themeYellow, severityTheme1, severityTheme2, severityTheme3]}\n    />,\n\n    // #### NORTE ####\n    <MultiLineChart\n    dataArray={[northEntries, smoothEntryValues(northEntries)]}\n      dateRange={dateRange}\n      labels={['Casos novos no Norte', '']}\n      themes={[themeYellow, themeGreyTransparent]}\n    />,\n\n    // #### PORTUGAL ####\n    <MultiLineChart\n      dataArray={[ptEntries.getAll(KEY.NEWCASES_PT), smoothEntryValues(ptEntries.getAll(KEY.NEWCASES_PT))]}\n      dateRange={dateRange}\n      labels={['Casos novos em Portugal', '']}\n      themes={[themeYellow, themeGreyTransparent]}\n    />\n  );\n}\n\nNewCasesCharts.propTypes = {\n  trofaEntries: PropTypes.instanceOf(EntriesAggregator).isRequired,\n  ptEntries: PropTypes.instanceOf(EntriesAggregator).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default NewCasesCharts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getChartOptions, getChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst DefaultLineChart = ({ data, dateRange, label, theme, zeroBased }) => {\n  const lastNEntries = getEntriesSince(dateRange, data);\n  const min = Math.min(...lastNEntries.map(e=>e.count));\n  const max = Math.max(...lastNEntries.map(e=>e.count));\n  const margin = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + margin);\n\n  let suggestedMin = Math.round(min - margin);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  \n  return (\n    <Line\n      data={getChartData(lastNEntries, label, theme)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nDefaultLineChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired,\n  zeroBased: PropTypes.bool,\n};\n\nDefaultLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default DefaultLineChart;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { chartGroupWrapper } from \"../utils/chartUtils\";\nimport DefaultLineChart from \"./templates/DefaultLineChart\";\nimport MultiLineChart from \"./templates/MultiLineChart\";\nimport { themeMagenta, themeMagentaDark, themeMagentaLight } from \"../config/themes\";\nimport { EntriesAggregator, KEY } from \"../model/EntriesAggregator\";\n\nconst GeneralCharts = ({ ptEntries, dateRange, classes }) => {\n  return chartGroupWrapper('Casos ativos', classes,\n    <DefaultLineChart\n      data={ptEntries.getAll(KEY.ACTIVE_PT)}\n      dateRange={dateRange}\n      label=\"Casos ativos em Portugal\"\n      theme={themeMagenta}\n      zeroBased={true}\n    />,\n    <MultiLineChart\n      dataArray={[ptEntries.getAll(KEY.HOSPITALIZED_NURSERY), ptEntries.getAll(KEY.HOSPITALIZED_ICU)]}\n      dateRange={dateRange}\n      labels={[\"Internados em Enfermaria em Portugal\", \"Internados em UCI em Portugal\"]}\n      themes={[themeMagentaLight, themeMagentaDark]}\n      zeroBased={true}\n    />\n  );\n}\n\nGeneralCharts.propTypes = {\n  ptEntries: PropTypes.instanceOf(EntriesAggregator).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default GeneralCharts;\n","import React, { useState, useEffect } from 'react';\nimport { AppBar, CircularProgress, FormControl, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { EntriesAggregator, KEY } from './model/EntriesAggregator';\nimport { getTownData, getPortugalData } from './utils/fetchData';\nimport NewCasesCharts from './chart/NewCasesCharts';\nimport GeneralCharts from './chart/GeneralCharts';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    'backgroundColor': '#f5f5f5',\n    flexGrow: 1,\n    display: 'flex',\n    'align-items': 'center',\n    'justify-content': 'center',\n    padding: 15,\n    paddingRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '50vh',\n    width: '90vw',\n  },\n  progress: {\n    float: 'none',\n    margin: '0 auto',\n  },\n  appBar: {\n    maxWidth: 170,\n    marginBottom: 20,\n    backgroundColor: '#e0e0e0',\n  },\n  formControl: {\n    margin: 10,\n    // minWidth: 120,\n  },\n}));\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  const classes = useStyles();\n  const [isFetching, setIsFetching]: [boolean, Function] = useState(true);\n  const [dateRange, setDateRange]: [number, Function] = useState(60);\n\n  const [trofaEntries, setTrofaEntries]: [EntriesAggregator, Function] = useState(new EntriesAggregator('DUMMY'));\n  const [ptEntries, setPtEntries]: [EntriesAggregator, Function] = useState(new EntriesAggregator('DUMMY'));\n\n  let lastTownUpdate: string = \"\";\n  let lastPtUpdate: string = \"\";\n\n\n  if (!isFetching) {\n    lastTownUpdate = trofaEntries.getLast(KEY.TOWN_INCIDENCE).dateStr;\n    lastPtUpdate = ptEntries.getLast(KEY.CONFIRMED_PT).dateStr;\n  }\n\n  useEffect(() => {\n    getTownData('TROFA', setTrofaEntries);\n    getPortugalData(setPtEntries);\n  }, []);\n\n  if (isFetching && trofaEntries.getAll(KEY.TOWN_INCIDENCE).length > 0 && ptEntries.getAll(KEY.CONFIRMED_PT).length > 0)\n    setIsFetching(false);\n\n  return (\n    <div className={classes.root}>\n      { isFetching\n        ? <CircularProgress className={classes.progress} />\n        : <div>\n          <AppBar position=\"sticky\" className={classes.appBar}>\n            <FormControl className={classes.formControl}>\n              <InputLabel id=\"time-label\">Tempo</InputLabel>\n              <Select\n                labelId=\"time-label\"\n                id=\"time-select\"\n                value={dateRange}\n                onChange={e => setDateRange(e.target.value)}\n              >\n                <MenuItem value={30}>30 dias</MenuItem>\n                <MenuItem value={60}>60 dias</MenuItem>\n                <MenuItem value={90}>90 dias</MenuItem>\n                <MenuItem value={999999}>Desde sempre</MenuItem>\n              </Select>\n            </FormControl>\n          </AppBar>\n\n          <Card>\n            <CardContent>\n              <Typography variant=\"body2\" component=\"p\">\n                A última atualização destes dados ocorreu nas seguintes datas: {`Portugal/Norte => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.\n              <br />\n                {/*The last update on this data occurred at the following times: {`Portugal/North => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.*/}\n              </Typography>\n            </CardContent>\n          </Card>\n\n          <br />\n          <GeneralCharts ptEntries={ptEntries} dateRange={dateRange} classes={classes} />\n          <br />\n          <NewCasesCharts trofaEntries={trofaEntries} dateRange={dateRange} ptEntries={ptEntries} classes={classes} />\n          <br />\n\n          <Card>\n            <CardContent>\n              <Typography variant=\"body2\" component=\"p\">\n                Os dados aqui apresentados são extraídos do repositório <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a>.\n              <br />\n              O código para este dashboard pode ser consultado <a href=\"https://github.com/DiogoDuque/covid19TrofaGraph\">aqui</a>.\n              <br />\n                {/*The data hereby presented is extracted from the <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a> repository.*/}\n              </Typography>\n            </CardContent>\n          </Card>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}