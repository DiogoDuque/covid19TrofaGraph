{"version":3,"sources":["model/PortugalEntries.tsx","model/Entry.tsx","utils/fetchData.tsx","utils/EntriesOps.tsx","utils/chartUtils.tsx","chart/templates/MultiLineChart.js","config/themes.js","chart/NewCasesCharts.js","chart/templates/DefaultLineChart.js","chart/GeneralCharts.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["PortugalEntries","confirmedPt","confirmedNorth","newConfirmedPt","ptActiveEntries","hospitalizedEntries","icuEntries","_confirmedPt","_confirmedNorth","_newConfirmedPt","_activePt","_hospitalized","_icu","this","Entry","date","count","_dateStr","_date","_count","dateStr","parts","split","Date","Number","strToDate","parseInt","isNaN","_getDataFromSource","sourceFile","url","headers","Headers","Accept","console","log","fetch","method","getAdaptativePointRadius","entries","width","window","screen","availWidth","densityValue","length","Math","max","getEntriesSince","dateRange","dateLimit","setDate","getDate","getDateLimitFromRange","filter","e","smoothEntryValues","strength","map","entry","index","startIndex","finishIndex","min","relevantEntries","slice","sum","reduce","acc","round","getChartData","label","chosenTheme","datasets","categoryPercentage","barPercentage","lineTension","borderWidth","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","pointRadius","data","labels","getMultipleChartData","entriesArray","chosenThemes","Array","from","keys","i","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","key","chartWrapper","chartElement","classes","Grid","item","xs","className","chartContainer","chartGroupWrapper","title","components","Typography","variant","style","textAlign","gutterBottom","container","spacing","component","MultiLineChart","dataArray","themes","zeroBased","lastNEntriesArray","d","lastEntriesFlat","flatMap","eArr","offset","error","options","defaultProps","getThemeFromRGB","r","g","b","hasBackground","otherOptions","unified","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","themeMagenta","themeMagentaLight","themeMagentaDark","themeYellow","themeGreyTransparent","pointHitRadius","borderDash","severityTheme1","severityTheme2","severityTheme3","NewCasesCharts","trofaEntries","northEntries","ptEntries","trofaLineGenerator","v","DefaultLineChart","theme","lastNEntries","margin","GeneralCharts","activePt","hospitalized","hospitalizedIcu","useStyles","makeStyles","root","flexGrow","display","padding","paddingRight","position","height","progress","float","appBar","maxWidth","marginBottom","formControl","App","useState","isFetching","setIsFetching","setDateRange","trofaNewEntries","setTrofaEntries","setPtEntries","lastTownUpdate","lastPtUpdate","northNewEntries","prevEntry","newCasesEntries","currEntry","push","derivateEntryValues","useEffect","town","callback","then","response","status","text","responseData","stream","Readable","pipe","Csv","on","catch","err","ptConfirmedEntries","northConfirmedEntries","ptNewConfirmedEntries","hospitalizedIcuEntries","confirmados","confirmados_arsnorte","confirmados_novos","ativos","internados","internados_uci","getPortugalData","CircularProgress","AppBar","FormControl","InputLabel","id","Select","labelId","value","onChange","target","MenuItem","Card","CardContent","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e2d54a13.chunk.js","sourcesContent":["import Entry from \"./Entry\";\n\nexport default class PortugalEntries {\n  _confirmedPt: Entry[];\n  _confirmedNorth: Entry[];\n  _newConfirmedPt: Entry[];\n  _activePt: Entry[];\n  _hospitalized: Entry[];\n  _icu: Entry[];\n\n  constructor(confirmedPt: Entry[] = [], confirmedNorth: Entry[] = [], newConfirmedPt: Entry[] = [],\n    ptActiveEntries: Entry[] = [], hospitalizedEntries: Entry[] = [], icuEntries: Entry[] = []) {\n    this._confirmedPt = confirmedPt;\n    this._confirmedNorth = confirmedNorth;\n    this._newConfirmedPt = newConfirmedPt;\n    this._activePt = ptActiveEntries;\n    this._hospitalized = hospitalizedEntries;\n    this._icu = icuEntries;\n  }\n\n  get confirmedPt(): Entry[] {\n    return this._confirmedPt;\n  }\n\n  get confirmedNorth(): Entry[] {\n    return this._confirmedNorth;\n  }\n\n  get newConfirmedPt(): Entry[] {\n    return this._newConfirmedPt;\n  }\n\n  get activePt(): Entry[] {\n    return this._activePt;\n  }\n\n  get hospitalized(): Entry[] {\n    return this._hospitalized;\n  }\n\n  get hospitalizedIcu(): Entry[] {\n    return this._icu;\n  }\n}\n","function strToDate(dateStr: string): Date {\n  const parts = dateStr.split('-');\n  return new Date(Number(parts[2]), Number(parts[1])-1, Number(parts[0]));\n}\n\nexport function dateToStr(date: Date): string {\n  return `${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;\n}\n\nexport default class Entry {\n  _dateStr: string;\n  _date: Date;\n  _count: number;\n\n  constructor(date: string, count: string|number) {\n    this._dateStr = date;\n    this._date = strToDate(date);\n\n    this._count = typeof count === 'number' ? count : parseInt(count);\n\n    if(isNaN(this._count))\n      this._count = 0;\n  }\n\n  get dateStr(): string {\n    return this._dateStr;\n  }\n\n  get date(): Date {\n    return this._date;\n  }\n\n  get count(): number {\n    return this._count;\n  }\n}","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport Entry from '../model/Entry';\nimport PortugalEntries from '../model/PortugalEntries';\n\nfunction _getDataFromSource(sourceFile: string): Promise<Response> {\n  const url = 'https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/'+sourceFile;\n  const headers: Headers = new Headers({\n    //'Content-Type': 'application/x-www-form-urlencoded',\n    //'Origin': 'https://github.com',\n    //'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    Accept: 'application/vnd.github.v3+json',\n    // 'Access-Control-Allow-Origin': '*',\n  });\n  console.log('[_getDataFromSource] Fetching '+sourceFile);\n  return fetch(url, { method: 'GET', headers });\n}\n\nexport function getTownData(town: string, callback: Function) {\n  _getDataFromSource('data_concelhos_incidencia.csv')\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const entries: Entry[] = [];\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => entries.push(new Entry(data.data, data[town])))\n        .on('end', () => callback(entries));\n    })\n    .catch(err => console.error(err));\n}\n\nexport function getPortugalData(callback: Function) {\n  _getDataFromSource('data.csv')\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const ptConfirmedEntries: Entry[] = [];\n      const northConfirmedEntries: Entry[] = [];\n      const ptNewConfirmedEntries: Entry[] = [];\n      const ptActiveEntries: Entry[] = [];\n      const hospitalizedEntries: Entry[] = [];\n      const hospitalizedIcuEntries: Entry[] = [];\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => {\n          ptConfirmedEntries.push(new Entry(data.data, data.confirmados));\n          northConfirmedEntries.push(new Entry(data.data, data.confirmados_arsnorte));\n          ptNewConfirmedEntries.push(new Entry(data.data, data.confirmados_novos));\n          ptActiveEntries.push(new Entry(data.data, data.ativos));\n          hospitalizedEntries.push(new Entry(data.data, data.internados));\n          hospitalizedIcuEntries.push(new Entry(data.data, data.internados_uci));\n        })\n        .on('end', () => callback(new PortugalEntries(ptConfirmedEntries, northConfirmedEntries, ptNewConfirmedEntries, ptActiveEntries, hospitalizedEntries, hospitalizedIcuEntries)));\n    })\n    .catch(err => console.error(err));\n}\n","import Entry from \"../model/Entry\";\n\n\nexport function getAdaptativePointRadius(entries: Entry[]): number {\n  const width = window.screen.availWidth;\n  const count = entries.length;\n  const densityRatio = count/width;\n  const densityValue = densityRatio*12;\n  const retVal = Math.max(4-densityValue, 1);\n  return retVal;\n}\n\nfunction getDateLimitFromRange(dateRange: number): Date {\n  const dateLimit = new Date();\n  dateLimit.setDate(dateLimit.getDate() - dateRange);\n  return dateLimit;\n}\n\nexport function getEntriesLineGenerator(entries: Entry[]): (v: number) => Entry[] {\n  return v => entries.map(e => new Entry(e.dateStr, v));\n}\n\nexport function getEntriesSince(dateRange: number, entries: Entry[]): Entry[] {\n  const dateLimit = getDateLimitFromRange(dateRange);\n  return entries.filter(e => e.date >= dateLimit);\n}\n\nexport function derivateEntryValues(entries: Entry[]): Entry[] {\n  let prevEntry = entries[0];\n  const newCasesEntries = [new Entry(prevEntry.dateStr, 0)];\n\n  for(let i=1; i<entries.length; i++) {\n    const currEntry = entries[i];\n    newCasesEntries.push(new Entry(currEntry.dateStr, currEntry.count - prevEntry.count));\n    prevEntry = currEntry;\n  }\n\n  return newCasesEntries;\n}\n\nexport function smoothEntryValues(entries: Entry[], strength: number = 7) {\n  return entries.map((entry, index) => {\n    const startIndex = Math.max(0, index-strength);\n    const finishIndex = Math.min(entries.length, index+strength);\n    const relevantEntries = entries.slice(startIndex, finishIndex);\n    const sum = relevantEntries.reduce((acc, e) => acc + e.count, 0);\n    return new Entry(entry.dateStr, Math.round(sum / relevantEntries.length));\n  });\n}\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Entry from \"../model/Entry\";\nimport { getAdaptativePointRadius } from './EntriesOps';\n\n/** CHART ARGUMENTS */\n\nexport const getChartData = (entries: Entry[], label: string, chosenTheme: object) => ({\n  datasets: [{\n    label,\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entries),\n    data: entries.map(entry => entry.count),\n    ...chosenTheme,\n  }],\n  labels: entries.map(entry => entry.dateStr),\n});\n\nexport const getMultipleChartData = (entriesArray: Entry[][], labels: string[], chosenThemes: object[]) => ({\n  datasets: Array.from(Array(entriesArray.length).keys()).map(i => ({\n    label: labels[i],\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entriesArray[i]),\n    data: entriesArray[i].map(entry => entry.count),\n    ...chosenThemes[i],\n  })),\n  labels: entriesArray[0].map(entry => entry.dateStr),\n});\n\nexport const getChartOptions = (beginAtZero=false, suggestedMin=null, suggestedMax=null) => ({\n  maintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      ticks: {\n        beginAtZero,\n        suggestedMin,\n        suggestedMax,\n      }\n    }]\n  },\n});\n\n/** CHART WRAPPERS */\n\nlet key=0;\nexport const chartWrapper = (chartElement: JSX.Element, classes: any): JSX.Element => (\n  <Grid item xs={12} key={key++}>\n    <div className={classes.chartContainer}>\n      {chartElement}\n    </div>\n  </Grid>\n);\n\nexport const chartGroupWrapper = (title: String, classes: any, ...components: JSX.Element[]) => (\n  <div>\n    <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n      {title}\n    </Typography>\n    <Grid container spacing={3}>\n      {components.map(component => chartWrapper(component, classes))}\n    </Grid>\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getChartOptions, getMultipleChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst MultiLineChart = ({ dataArray, dateRange, labels, themes, zeroBased }) => {\n  const lastNEntriesArray = dataArray.map(d=>getEntriesSince(dateRange, d));\n  const lastEntriesFlat = lastNEntriesArray.flatMap(eArr=>eArr.map(e=>e.count));\n  const min = Math.min(...lastEntriesFlat);\n  const max = Math.max(...lastEntriesFlat);\n  const offset = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + offset);\n\n  let suggestedMin = Math.round(min - offset);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  if(dataArray.length !== labels.length || labels.length !== themes.length) {\n    console.error('Chart arguments cardinality did not match!');\n    return <Line options={getChartOptions(false, suggestedMin, suggestedMax)}/>\n  }\n  return (\n    <Line\n      data={getMultipleChartData(lastNEntriesArray, labels, themes)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nMultiLineChart.propTypes = {\n  dataArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(Entry))).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string.isRequired),\n  themes: PropTypes.arrayOf(PropTypes.object.isRequired),\n  zeroBased: PropTypes.bool,\n};\n\nMultiLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default MultiLineChart;\n","function getThemeFromRGB(r,g,b, hasBackground=true, otherOptions={}) {\n  const unified = `${r},${g},${b}`;\n  return {\n    backgroundColor: hasBackground ? `rgba(${unified},0.4)` : 'rgba(0,0,0,0)',\n    borderColor: `rgba(${unified},1)`,\n    pointBorderColor: `rgba(${unified},1)`,\n    pointHoverBackgroundColor: `rgba(${unified},1)`,\n    ...otherOptions,\n  }\n}\n\nexport const themeCyan = getThemeFromRGB(75, 192, 192);\n\nexport const themeMagenta = getThemeFromRGB(192, 75, 192);\n\nexport const themeMagentaLight = getThemeFromRGB(217, 128, 217);\n\nexport const themeMagentaDark = getThemeFromRGB(140, 83, 140);\n\nexport const themeYellow = getThemeFromRGB(192, 192, 75);\n\nexport const themeGreyTransparent = getThemeFromRGB(200, 200, 200, false, {pointRadius:0, pointHitRadius:0, borderDash:[8]});\n\nexport const severityTheme1 = getThemeFromRGB(255, 189, 0, false);\n\nexport const severityTheme2 = getThemeFromRGB(255, 84, 0, false);\n\nexport const severityTheme3 = getThemeFromRGB(158, 0, 89, false);\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { chartGroupWrapper } from \"../utils/chartUtils\";\nimport { getEntriesLineGenerator, smoothEntryValues } from '../utils/EntriesOps';\nimport MultiLineChart from \"./templates/MultiLineChart\";\nimport { themeYellow, themeGreyTransparent, severityTheme1, severityTheme2, severityTheme3 } from \"../config/themes\";\nimport Entry from \"../model/Entry\";\nimport PortugalEntries from \"../model/PortugalEntries\";\n\nconst NewCasesCharts = ({ trofaEntries, northEntries, ptEntries, dateRange, classes }) => {\n  const trofaLineGenerator = getEntriesLineGenerator(trofaEntries);\n  return chartGroupWrapper('Casos novos', classes,\n\n    // #### TROFA ####\n    <MultiLineChart\n      dataArray={[\n        trofaEntries, trofaLineGenerator(240),\n        trofaLineGenerator(480), trofaLineGenerator(960),\n      ]}\n      dateRange={dateRange}\n      labels={[\n        'Incidência na Trofa (a 14 dias p/ 100k hab.)', 'Risco elevado',\n        'Risco muito elevado', 'Risco extremamente elevado'\n      ]}\n      themes={[themeYellow, severityTheme1, severityTheme2, severityTheme3]}\n    />,\n\n    // #### NORTE ####\n    <MultiLineChart\n    dataArray={[northEntries, smoothEntryValues(northEntries)]}\n      dateRange={dateRange}\n      labels={['Casos novos no Norte', '']}\n      themes={[themeYellow, themeGreyTransparent]}\n    />,\n\n    // #### PORTUGAL ####\n    <MultiLineChart\n      dataArray={[ptEntries.newConfirmedPt, smoothEntryValues(ptEntries.newConfirmedPt)]}\n      dateRange={dateRange}\n      labels={['Casos novos em Portugal', '']}\n      themes={[themeYellow, themeGreyTransparent]}\n    />\n  );\n}\n\nNewCasesCharts.propTypes = {\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  northEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default NewCasesCharts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getChartOptions, getChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst DefaultLineChart = ({ data, dateRange, label, theme, zeroBased }) => {\n  const lastNEntries = getEntriesSince(dateRange, data);\n  const min = Math.min(...lastNEntries.map(e=>e.count));\n  const max = Math.max(...lastNEntries.map(e=>e.count));\n  const margin = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + margin);\n\n  let suggestedMin = Math.round(min - margin);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  \n  return (\n    <Line\n      data={getChartData(lastNEntries, label, theme)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nDefaultLineChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired,\n  zeroBased: PropTypes.bool,\n};\n\nDefaultLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default DefaultLineChart;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { chartGroupWrapper } from \"../utils/chartUtils\";\nimport DefaultLineChart from \"./templates/DefaultLineChart\";\nimport MultiLineChart from \"./templates/MultiLineChart\";\nimport { themeMagenta, themeMagentaDark, themeMagentaLight } from \"../config/themes\";\nimport PortugalEntries from \"../model/PortugalEntries\";\n\nconst GeneralCharts = ({ ptEntries, dateRange, classes }) => {\n  return chartGroupWrapper('Casos ativos', classes,\n    <DefaultLineChart\n      data={ptEntries.activePt}\n      dateRange={dateRange}\n      label=\"Casos ativos em Portugal\"\n      theme={themeMagenta}\n      zeroBased={true}\n    />,\n    <MultiLineChart\n      dataArray={[ptEntries.hospitalized, ptEntries.hospitalizedIcu]}\n      dateRange={dateRange}\n      labels={[\"Internados em Portugal\", \"Internados em UCI em Portugal\"]}\n      themes={[themeMagentaLight, themeMagentaDark]}\n      zeroBased={true}\n    />\n  );\n}\n\nGeneralCharts.propTypes = {\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default GeneralCharts;\n","import React, { useState, useEffect } from 'react';\nimport { AppBar, CircularProgress, FormControl, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport PortugalEntries from './model/PortugalEntries';\nimport Entry from './model/Entry';\nimport { getTownData, getPortugalData } from './utils/fetchData';\nimport NewCasesCharts from './chart/NewCasesCharts';\nimport { derivateEntryValues } from './utils/EntriesOps';\nimport GeneralCharts from './chart/GeneralCharts';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    'backgroundColor': '#f5f5f5',\n    flexGrow: 1,\n    display: 'flex',\n    'align-items': 'center',\n    'justify-content': 'center',\n    padding: 15,\n    paddingRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '50vh',\n    width: '90vw',\n  },\n  progress: {\n    float: 'none',\n    margin: '0 auto',\n  },\n  appBar: {\n    maxWidth: 170,\n    marginBottom: 20,\n    backgroundColor: '#e0e0e0',\n  },\n  formControl: {\n    margin: 10,\n    // minWidth: 120,\n  },\n}));\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  const classes = useStyles();\n  const [isFetching, setIsFetching]: [boolean, Function] = useState(true);\n  const [dateRange, setDateRange]: [number, Function] = useState(60);\n\n  const [trofaNewEntries, setTrofaEntries]: [Entry[], Function] = useState([]);\n  const [ptEntries, setPtEntries]: [PortugalEntries, Function] = useState(new PortugalEntries());\n\n  let lastTownUpdate: string = \"\";\n  let lastPtUpdate: string = \"\";\n  let northNewEntries: Entry[] = [];\n\n\n  if(!isFetching) {\n    lastTownUpdate = trofaNewEntries[trofaNewEntries.length-1].dateStr;\n    lastPtUpdate = ptEntries.confirmedPt[ptEntries.confirmedPt.length -1].dateStr;\n    northNewEntries = derivateEntryValues(ptEntries.confirmedNorth);\n  }\n\n  useEffect(() => {\n    getTownData('TROFA', setTrofaEntries);\n    getPortugalData(setPtEntries);\n  }, []);\n  \n  if(isFetching && trofaNewEntries.length > 0 && ptEntries.confirmedPt.length > 0)\n    setIsFetching(false);\n\n  return (\n    <div className={classes.root}>\n    { isFetching\n      ? <CircularProgress className={classes.progress} />\n      : <div>\n        <AppBar position=\"sticky\" className={classes.appBar}>\n        <FormControl className={classes.formControl}>\n        <InputLabel id=\"time-label\">Tempo</InputLabel>\n        <Select\n          labelId=\"time-label\"\n          id=\"time-select\"\n          value={dateRange}\n          onChange={e => setDateRange(e.target.value)}\n        >\n          <MenuItem value={30}>30 dias</MenuItem>\n          <MenuItem value={60}>60 dias</MenuItem>\n          <MenuItem value={90}>90 dias</MenuItem>\n          <MenuItem value={999999}>Desde sempre</MenuItem>\n        </Select>\n        </FormControl>\n        </AppBar>\n\n        <Card>\n          <CardContent>\n            <Typography variant=\"body2\" component=\"p\">\n              A última atualização destes dados ocorreu nas seguintes datas: {`Portugal/Norte => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.\n              <br/>\n              {/*The last update on this data occurred at the following times: {`Portugal/North => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.*/}\n            </Typography>\n          </CardContent>\n        </Card>\n\n        <br/>\n        <GeneralCharts ptEntries={ptEntries} dateRange={dateRange} classes={classes} />\n        <br/>\n        <NewCasesCharts trofaEntries={trofaNewEntries} dateRange={dateRange} northEntries={northNewEntries} ptEntries={ptEntries} classes={classes} />\n        <br/>\n\n        <Card>\n          <CardContent>\n            <Typography variant=\"body2\" component=\"p\">\n              Os dados aqui apresentados são extraídos do repositório <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a>.\n              <br/>\n              O código para este dashboard pode ser consultado <a href=\"https://github.com/DiogoDuque/covid19TrofaGraph\">aqui</a>.\n              <br/>\n              {/*The data hereby presented is extracted from the <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a> repository.*/}\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}