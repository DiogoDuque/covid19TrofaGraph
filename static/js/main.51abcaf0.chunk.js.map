{"version":3,"sources":["model/PortugalEntries.tsx","model/Entry.tsx","utils/fetchData.tsx","utils/chartUtils.tsx","chart/DefaultLineChart.js","config/themes.js","chart/ConfirmedCasesCharts.js","chart/NewCasesCharts.js","chart/DefaultBarChart.js","chart/CaseVariationCharts.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["PortugalEntries","confirmedPt","confirmedNorth","newConfirmedPt","_confirmedPt","_confirmedNorth","_newConfirmedPt","this","Entry","date","count","_dateStr","_count","parseInt","isNaN","_getDataFromSource","sourceFile","url","headers","Headers","console","log","fetch","method","getTownData","town","callback","then","response","status","text","responseData","entries","stream","Readable","push","pipe","Csv","on","data","catch","err","error","getPortugalData","ptConfirmedEntries","northConfirmedEntries","ptNewConfirmedEntries","confirmados","confirmados_arsnorte","confirmados_novos","filterLastNDays","n","size","length","slice","derivateEntryValues","prevEntry","newCasesEntries","dateStr","i","currEntry","getChartData","label","chosenTheme","datasets","fill","categoryPercentage","barPercentage","lineTension","borderWidth","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","map","entry","labels","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","chartWrapper","chartElement","classes","Grid","item","xs","className","chartContainer","DefaultLineChart","datapointsCount","theme","zeroBased","lastNEntries","min","Math","e","max","diff","round","options","defaultProps","themeCyan","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","themeMagenta","themeYellow","ConfirmedCasesCharts","trofaEntries","ptEntries","Typography","variant","style","textAlign","gutterBottom","container","spacing","NewCasesCharts","northEntries","DefaultBarChart","CaseVariationCharts","nationalEntries","useStyles","makeStyles","root","flexGrow","display","padding","paddingRight","position","margin","height","width","progress","float","App","useState","isFetching","setIsFetching","setTrofaEntries","setPtEntries","lastTownUpdate","lastPtUpdate","trofaNewEntries","northNewEntries","trofaVariationEntries","northVariationEntries","ptVariationEntries","useEffect","CircularProgress","Card","CardContent","component","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51abcaf0.chunk.js","sourcesContent":["import Entry from \"./Entry\";\r\n\r\nexport default class PortugalEntries {\r\n  _confirmedPt: Entry[];\r\n  _confirmedNorth: Entry[];\r\n  _newConfirmedPt: Entry[];\r\n\r\n  constructor(confirmedPt: Entry[] = [], confirmedNorth: Entry[] = [], newConfirmedPt: Entry[] = []) {\r\n    this._confirmedPt = confirmedPt;\r\n    this._confirmedNorth = confirmedNorth;\r\n    this._newConfirmedPt = newConfirmedPt;\r\n  }\r\n\r\n  get confirmedPt(): Entry[] {\r\n    return this._confirmedPt;\r\n  }\r\n\r\n  get confirmedNorth(): Entry[] {\r\n    return this._confirmedNorth;\r\n  }\r\n\r\n  get newConfirmedPt(): Entry[] {\r\n    return this._newConfirmedPt;\r\n  }\r\n}\r\n","export default class Entry {\r\n  _dateStr: string;\r\n  // _date: Date;\r\n  _count: number;\r\n\r\n  constructor(date: string, count: string|number) {\r\n    this._dateStr = date;\r\n    // this._date = strToDate(date);\r\n\r\n    this._count = typeof count === 'number' ? count : parseInt(count);\r\n\r\n    if(isNaN(this._count))\r\n      this._count = 0;\r\n  }\r\n\r\n  get dateStr(): string {\r\n    return this._dateStr;\r\n  }\r\n\r\n\r\n  get count(): number {\r\n    return this._count;\r\n  }\r\n}","import { Readable } from 'stream';\r\nimport Csv from 'csv-parser';\r\nimport Entry from '../model/Entry';\r\nimport PortugalEntries from '../model/PortugalEntries';\r\n\r\nfunction _getDataFromSource(sourceFile: string): Promise<Response> {\r\n  const url = 'https://cors-anywhere.herokuapp.com/https://github.com/dssg-pt/covid19pt-data/raw/master/'+sourceFile;\r\n  const headers: Headers = new Headers({\r\n    'Content-Type': 'application/x-www-form-urlencoded',\r\n    'Origin': 'https://github.com',\r\n    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\r\n    // 'Access-Control-Allow-Origin': '*',\r\n  });\r\n  console.log('Fetching '+sourceFile);\r\n  return fetch(url, { method: 'GET', headers });\r\n}\r\n\r\nexport function getTownData(town: string, callback: Function) {\r\n  _getDataFromSource('data_concelhos.csv')\r\n    .then((response: Response) => {\r\n      if (response && response.status === 200)\r\n        return response.text();\r\n    })\r\n    .then(responseData => {\r\n      const entries: Entry[] = [];\r\n      const stream = new Readable();\r\n      stream.push(responseData);\r\n      stream.push(null);\r\n      stream\r\n        .pipe(Csv())\r\n        .on('data', data => entries.push(new Entry(data.data, data[town])))\r\n        .on('end', () => callback(entries));\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\nexport function getPortugalData(callback: Function) {\r\n  _getDataFromSource('data.csv')\r\n    .then((response: Response) => {\r\n      if (response && response.status === 200)\r\n        return response.text();\r\n    })\r\n    .then(responseData => {\r\n      const ptConfirmedEntries: Entry[] = [];\r\n      const northConfirmedEntries: Entry[] = [];\r\n      const ptNewConfirmedEntries: Entry[] = [];\r\n      const stream = new Readable();\r\n      stream.push(responseData);\r\n      stream.push(null);\r\n      stream\r\n        .pipe(Csv())\r\n        .on('data', data => {\r\n          ptConfirmedEntries.push(new Entry(data.data, data.confirmados));\r\n          northConfirmedEntries.push(new Entry(data.data, data.confirmados_arsnorte));\r\n          ptNewConfirmedEntries.push(new Entry(data.data, data.confirmados_novos));\r\n        })\r\n        .on('end', () => callback(new PortugalEntries(ptConfirmedEntries, northConfirmedEntries, ptNewConfirmedEntries)));\r\n    })\r\n    .catch(err => console.error(err));\r\n}\r\n\r\nexport default {\r\n  getTownData,\r\n  getPortugalData,\r\n}","import Entry from \"../model/Entry\";\r\nimport React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nexport function filterLastNDays(entries: Entry[], n: number) {\r\n  const size = entries.length;\r\n  if(size <= n)\r\n    return entries;\r\n  return entries.slice(size-n);\r\n}\r\n\r\nexport function derivateEntryValues(entries: Entry[]): Entry[] {\r\n  let prevEntry = entries[0];\r\n  const newCasesEntries = [new Entry(prevEntry.dateStr, 0)];\r\n\r\n  for(let i=1; i<entries.length; i++) {\r\n    const currEntry = entries[i];\r\n    newCasesEntries.push(new Entry(currEntry.dateStr, currEntry.count - prevEntry.count));\r\n    prevEntry = currEntry;\r\n  }\r\n\r\n  return newCasesEntries;\r\n}\r\n\r\nexport function getChartData(entries: Entry[], label: string, chosenTheme: object) {\r\n  return {\r\n    datasets: [{\r\n      label,\r\n      fill: true,\r\n      categoryPercentage: 1.0,\r\n      barPercentage: 0.95,\r\n      lineTension: 0.1,\r\n      borderWidth: 2,\r\n      pointBackgroundColor: '#fff',\r\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n      pointBorderWidth: 1,\r\n      pointHoverRadius: 5,\r\n      data: entries.map(entry => entry.count),\r\n      ...chosenTheme,\r\n    }],\r\n    labels: entries.map(entry => entry.dateStr),\r\n  }\r\n}\r\n\r\nexport function getChartOptions(beginAtZero=false, suggestedMin=null, suggestedMax=null) {\r\n  return {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      yAxes: [{\r\n        ticks: {\r\n          beginAtZero,\r\n          suggestedMin,\r\n          suggestedMax,\r\n        }\r\n      }]\r\n    },\r\n  }\r\n}\r\n\r\nexport function chartWrapper(chartElement: JSX.Element, classes: any): JSX.Element {\r\n  return (\r\n    <Grid item xs={12}>\r\n      <div className={classes.chartContainer}>\r\n        {chartElement}\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default {\r\n  filterLastNDays,\r\n  processCaseCount2NewCases: derivateEntryValues,\r\n  getChartData,\r\n  getChartOptions,\r\n  chartWrapper,\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Entry from '../model/Entry';\r\nimport { filterLastNDays, getChartOptions, getChartData } from '../utils/chartUtils';\r\n\r\nconst DefaultLineChart = ({ data, datapointsCount, label, theme, zeroBased }) => {\r\n  const lastNEntries = filterLastNDays(data, datapointsCount);\r\n  const min = Math.min(...lastNEntries.map(e=>e.count));\r\n  const max = Math.max(...lastNEntries.map(e=>e.count));\r\n  const diff = Math.max((max - min)/20, zeroBased ? 4 : 2);\r\n\r\n  const suggestedMax = Math.round(max + diff);\r\n\r\n  let suggestedMin = Math.round(min - diff);\r\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\r\n\r\n  \r\n  return (\r\n    <Line\r\n      data={getChartData(lastNEntries, `${label} (${datapointsCount} dias)`, theme)}\r\n      options={getChartOptions(false, suggestedMin, suggestedMax)}\r\n    />\r\n  );\r\n}\r\n\r\nDefaultLineChart.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  datapointsCount: PropTypes.number.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n  zeroBased: PropTypes.bool,\r\n};\r\n\r\nDefaultLineChart.defaultProps = {\r\n  zeroBased: true,\r\n};\r\n\r\nexport default DefaultLineChart;\r\n","export const themeCyan = {\r\n  backgroundColor: 'rgba(75,192,192,0.4)',\r\n  borderColor: 'rgba(75,192,192,1)',\r\n  pointBorderColor: 'rgba(75,192,192,1)',\r\n  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n}\r\n\r\nexport const themeMagenta = {\r\n  backgroundColor: 'rgba(192,75,192,0.4)',\r\n  borderColor: 'rgba(192,75,192,1)',\r\n  pointBorderColor: 'rgba(192,75,192,1)',\r\n  pointHoverBackgroundColor: 'rgba(192,75,192,1)',\r\n}\r\n\r\nexport const themeYellow = {\r\n  backgroundColor: 'rgba(192,192,75,0.4)',\r\n  borderColor: 'rgba(192,192,75,1)',\r\n  pointBorderColor: 'rgba(192,192,75,1)',\r\n  pointHoverBackgroundColor: 'rgba(192,192,75,1)',\r\n}\r\n\r\nexport default {\r\n  themeCyan,\r\n  themeMagenta,\r\n  themeYellow,\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport { chartWrapper } from \"../utils/chartUtils\";\r\nimport DefaultLineChart from \"./DefaultLineChart\";\r\nimport { themeCyan } from \"../config/themes\";\r\nimport Entry from \"../model/Entry\";\r\nimport PortugalEntries from \"../model/PortugalEntries\";\r\n\r\nconst ConfirmedCasesCharts = ({ trofaEntries, ptEntries, classes }) => {\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\r\n        Casos confirmados\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        {chartWrapper(<DefaultLineChart\r\n          data={trofaEntries}\r\n          datapointsCount={30}\r\n          label=\"Casos confirmados na Trofa\"\r\n          theme={themeCyan}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultLineChart\r\n          data={ptEntries.confirmedNorth}\r\n          datapointsCount={30}\r\n          label=\"Casos confirmados no Norte\"\r\n          theme={themeCyan}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultLineChart\r\n          data={ptEntries.confirmedPt}\r\n          datapointsCount={30}\r\n          label=\"Casos confirmados em Portugal\"\r\n          theme={themeCyan}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultLineChart\r\n          data={ptEntries.confirmedPt}\r\n          datapointsCount={90}\r\n          label=\"Casos confirmados em Portugal\"\r\n          theme={themeCyan}\r\n        />, classes)}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nConfirmedCasesCharts.propTypes = {\r\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\r\n  classes: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default ConfirmedCasesCharts;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport { chartWrapper } from \"../utils/chartUtils\";\r\nimport DefaultLineChart from \"./DefaultLineChart\";\r\nimport { themeYellow } from \"../config/themes\";\r\nimport Entry from \"../model/Entry\";\r\nimport PortugalEntries from \"../model/PortugalEntries\";\r\n\r\nconst NewCasesCharts = ({ trofaEntries, northEntries, ptEntries, classes }) => {\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\r\n        Casos novos\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        {chartWrapper(<DefaultLineChart\r\n          data={trofaEntries}\r\n          datapointsCount={30}\r\n          label=\"Casos novos na Trofa\"\r\n          theme={themeYellow}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultLineChart\r\n          data={northEntries}\r\n          datapointsCount={30}\r\n          label=\"Casos novos no Norte\"\r\n          theme={themeYellow}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultLineChart\r\n          data={ptEntries.newConfirmedPt}\r\n          datapointsCount={30}\r\n          label=\"Casos novos em Portugal\"\r\n          theme={themeYellow}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultLineChart\r\n          data={ptEntries.newConfirmedPt}\r\n          datapointsCount={90}\r\n          label=\"Casos novos em Portugal\"\r\n          theme={themeYellow}\r\n        />, classes)}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nNewCasesCharts.propTypes = {\r\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  northEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\r\n  classes: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default NewCasesCharts;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport Entry from '../model/Entry';\r\nimport { filterLastNDays, getChartOptions, getChartData } from '../utils/chartUtils';\r\n\r\nconst DefaultBarChart = ({ data, datapointsCount, label, theme, zeroBased }) => {\r\n  const lastNEntries = filterLastNDays(data, datapointsCount);\r\n  const min = Math.min(...lastNEntries.map(e=>e.count));\r\n  const max = Math.max(...lastNEntries.map(e=>e.count));\r\n  const diff = Math.max((max - min)/20, zeroBased ? 4 : 2);\r\n\r\n  const suggestedMax = Math.round(max + diff);\r\n\r\n  let suggestedMin = Math.round(min - diff);\r\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\r\n\r\n  \r\n  return (\r\n    <Bar\r\n      data={getChartData(lastNEntries, `${label} (${datapointsCount} dias)`, theme)}\r\n      options={getChartOptions(false, suggestedMin, suggestedMax)}\r\n    />\r\n  );\r\n}\r\n\r\nDefaultBarChart.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  datapointsCount: PropTypes.number.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  theme: PropTypes.object.isRequired,\r\n  zeroBased: PropTypes.bool,\r\n};\r\n\r\nDefaultBarChart.defaultProps = {\r\n  zeroBased: true,\r\n};\r\n\r\nexport default DefaultBarChart;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport { chartWrapper } from \"../utils/chartUtils\";\r\nimport DefaultBarChart from \"./DefaultBarChart\";\r\nimport { themeMagenta } from \"../config/themes\";\r\nimport Entry from \"../model/Entry\";\r\n\r\nconst CaseVariationCharts = ({ trofaEntries, northEntries, nationalEntries, classes }) => {\r\n  return (\r\n    <div>\r\n      <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\r\n        Variação de casos\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        {chartWrapper(<DefaultBarChart\r\n          data={trofaEntries}\r\n          datapointsCount={30}\r\n          label=\"Variação de casos na Trofa\"\r\n          theme={themeMagenta}\r\n          zeroBased={false}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultBarChart\r\n          data={northEntries}\r\n          datapointsCount={30}\r\n          label=\"Variação de casos no Norte\"\r\n          theme={themeMagenta}\r\n          zeroBased={false}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultBarChart\r\n          data={nationalEntries}\r\n          datapointsCount={30}\r\n          label=\"Variação de casos em Portugal\"\r\n          theme={themeMagenta}\r\n          zeroBased={false}\r\n        />, classes)}\r\n        {chartWrapper(<DefaultBarChart\r\n          data={nationalEntries}\r\n          datapointsCount={90}\r\n          label=\"Variação de casos em Portugal\"\r\n          theme={themeMagenta}\r\n          zeroBased={false}\r\n        />, classes)}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nCaseVariationCharts.propTypes = {\r\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  northEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  nationalEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\r\n  classes: PropTypes.any.isRequired,\r\n};\r\n\r\nexport default CaseVariationCharts;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CircularProgress, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport PortugalEntries from './model/PortugalEntries';\r\nimport Entry from './model/Entry';\r\nimport { getTownData, getPortugalData } from './utils/fetchData';\r\nimport ConfirmedCasesCharts from './chart/ConfirmedCasesCharts';\r\nimport NewCasesCharts from './chart/NewCasesCharts';\r\nimport CaseVariationCharts from './chart/CaseVariationCharts';\r\nimport { derivateEntryValues } from './utils/chartUtils';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    'backgroundColor': '#f5f5f5',\r\n    flexGrow: 1,\r\n    display: 'flex',\r\n    'align-items': 'center',\r\n    'justify-content': 'center',\r\n    padding: 15,\r\n    paddingRight: 30,\r\n  },\r\n  chartContainer: {\r\n    position: 'relative',\r\n    margin: 'auto',\r\n    height: '50vh',\r\n    width: '90vw',\r\n  },\r\n  progress: {\r\n    float: 'none',\r\n    margin: '0 auto',\r\n  },\r\n}));\r\n\r\nconst App: () => JSX.Element = (): JSX.Element => {\r\n  const classes = useStyles();\r\n  const [isFetching, setIsFetching]: [boolean, Function] = useState(true);\r\n\r\n  const [trofaEntries, setTrofaEntries]: [Entry[], Function] = useState([]);\r\n  const [ptEntries, setPtEntries]: [PortugalEntries, Function] = useState(new PortugalEntries());\r\n\r\n  let lastTownUpdate: string = \"\";\r\n  let lastPtUpdate: string = \"\";\r\n  let trofaNewEntries: Entry[] = [];\r\n  let northNewEntries: Entry[] = [];\r\n  let trofaVariationEntries: Entry[] = [];\r\n  let northVariationEntries: Entry[] = [];\r\n  let ptVariationEntries: Entry[] = [];\r\n\r\n\r\n  if(!isFetching) {\r\n    lastTownUpdate = trofaEntries[trofaEntries.length-1].dateStr;\r\n    lastPtUpdate = ptEntries.confirmedPt[ptEntries.confirmedPt.length -1].dateStr;\r\n    trofaNewEntries = derivateEntryValues(trofaEntries);\r\n    northNewEntries = derivateEntryValues(ptEntries.confirmedNorth);\r\n    trofaVariationEntries = derivateEntryValues(trofaNewEntries);\r\n    northVariationEntries = derivateEntryValues(northNewEntries);\r\n    ptVariationEntries = derivateEntryValues(ptEntries.newConfirmedPt);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getTownData('TROFA', setTrofaEntries);\r\n    getPortugalData(setPtEntries);\r\n  }, []);\r\n  \r\n  if(isFetching && trofaEntries.length > 0 && ptEntries.confirmedPt.length > 0)\r\n    setIsFetching(false);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n    { isFetching\r\n      ? <CircularProgress className={classes.progress} />\r\n      : <div>\r\n        <Card>\r\n        <CardContent>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            A última atualização destes dados ocorreu nas seguintes datas: {`Portugal/Norte => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.\r\n            <br/>\r\n            {/*The last update on this data occurred at the following times: {`Portugal/North => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.*/}\r\n          </Typography>\r\n        </CardContent>\r\n        </Card>\r\n\r\n        <br/>\r\n        <ConfirmedCasesCharts trofaEntries={trofaEntries} ptEntries={ptEntries} classes={classes} />\r\n        <br/>\r\n        <NewCasesCharts trofaEntries={trofaNewEntries} northEntries={northNewEntries} ptEntries={ptEntries} classes={classes} />\r\n        <br/>\r\n        <CaseVariationCharts trofaEntries={trofaVariationEntries} northEntries={northVariationEntries} nationalEntries={ptVariationEntries} classes={classes} />\r\n        <br/>\r\n\r\n        <Card>\r\n        <CardContent>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            Os dados aqui apresentados são extraídos do repositório <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a>.\r\n            <br/>\r\n            O código para este dashboard pode ser consultado <a href=\"https://github.com/DiogoDuque/covid19TrofaGraph\">aqui</a>.\r\n            <br/>\r\n            {/*The data hereby presented is extracted from the <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a> repository.*/}\r\n          </Typography>\r\n        </CardContent>\r\n        </Card>\r\n      </div>\r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}