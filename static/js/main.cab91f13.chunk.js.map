{"version":3,"sources":["model/Entry.tsx","model/EntriesAggregator.tsx","utils/fetchData.tsx","utils/EntriesOps.tsx","utils/chartUtils.tsx","component/chart/MultiLineChart.js","config/themes.js","store/EntriesStore.tsx","store/GeneralStore.tsx","component/app/NewCasesCharts.js","component/chart/DefaultLineChart.js","component/app/GeneralCharts.js","component/card/TextCard.js","component/app/MyHeader.js","component/app/MyFooter.js","component/card/InfoCard.js","component/app/SummaryCards.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Entry","date","count","_dateStr","_date","_count","this","dateStr","parts","split","Date","Number","strToDate","parseInt","isNaN","KEY","CONFIRMED_PT","CONFIRMED_NORTH","CONFIRMED_CENTER","CONFIRMED_LISBOA_TEJO","CONFIRMED_ALENTEJO","CONFIRMED_ALGARVE","NEWCASES_PT","ACTIVE_PT","HOSPITALIZED","HOSPITALIZED_NURSERY","HOSPITALIZED_ICU","TOWN_INCIDENCE_14","TOWN_CONFIRMED_14","EntriesAggregator","name","_name","key","console","warn","EntriesAggregatorImpl","builder","_aggregationMap","_aggregator","entries","length","EntriesAggregatorBuilder","entry","current","_getDataFromSource","sourceFile","url","headers","Headers","Accept","log","fetch","method","getAdaptativePointRadius","width","window","screen","availWidth","densityValue","Math","max","getEntriesSince","dateRange","dateLimit","setDate","getDate","getDateLimitFromRange","filter","e","derivateEntryValues","prevEntry","newCasesEntries","i","currEntry","push","smoothEntryValues","strength","map","index","startIndex","finishIndex","min","relevantEntries","slice","sum","reduce","acc","round","getChartData","label","chosenTheme","datasets","categoryPercentage","barPercentage","lineTension","borderWidth","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","pointRadius","data","labels","getMultipleChartData","entriesArray","chosenThemes","Array","from","keys","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","cardWrapper","element","Grid","item","xs","md","chartWrapper","chartElement","styles","className","chartContainer","chartGroupWrapper","title","components","Typography","variant","style","textAlign","gutterBottom","container","spacing","component","MultiLineChart","dataArray","themes","zeroBased","lastNEntriesArray","d","lastEntriesFlat","flatMap","eArr","offset","error","options","defaultProps","getThemeFromRGB","r","g","b","hasBackground","otherOptions","unified","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","themeCyanNoBG","themeMagenta","themeMagentaNoBG","themeMagentaLight","themeMagentaDark","themeYellow","themeYellowNoBG","themeBlueNoBG","themeGreenNoBG","themeRed","themeGreyTransparent","pointHitRadius","borderDash","severityTheme1","severityTheme2","severityTheme3","EntriesStore","Store","portugalEntries","trofaEntries","GeneralStore","NewCasesCharts","useState","s","ptEntries","trofaLineGenerator","getAll","v","northEntries","centerEntries","lisbonEntries","alentejoEntries","algarveEntries","DefaultLineChart","theme","lastNEntries","margin","GeneralCharts","TextCard","children","Card","CardContent","MyHeader","AppBar","position","appBar","FormControl","formControl","InputLabel","id","Select","labelId","value","onChange","update","target","MenuItem","MyFooter","href","InfoCard","elevation","fontSize","fontWeight","color","SummaryCards","direction","alignItems","justify","cardGroupWrapper","getLast","useStyles","makeStyles","root","flexGrow","display","padding","paddingRight","height","progress","float","maxWidth","marginBottom","App","isFetching","setIsFetching","lastTownUpdate","lastPtUpdate","useEffect","town","callback","filename","then","response","status","text","responseData","stream","Readable","pipe","Csv","on","concelho","forEach","addEntry","build","catch","err","getTownData","getPortugalData","CircularProgress","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cab91f13.chunk.js","sourcesContent":["function strToDate(dateStr: string): Date {\n  const parts = dateStr.split('-');\n  return new Date(Number(parts[2]), Number(parts[1])-1, Number(parts[0]));\n}\n\nexport function dateToStr(date: Date): string {\n  return `${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;\n}\n\nexport default class Entry {\n  _dateStr: string;\n  _date: Date;\n  _count: number;\n\n  constructor(date: string, count: string|number) {\n    this._dateStr = date;\n    this._date = strToDate(date);\n\n    this._count = typeof count === 'number' ? count : parseInt(count);\n\n    if(isNaN(this._count))\n      this._count = 0;\n  }\n\n  get dateStr(): string {\n    return this._dateStr;\n  }\n\n  get date(): Date {\n    return this._date;\n  }\n\n  get count(): number {\n    return this._count;\n  }\n}","import Entry from './Entry';\n\nexport const KEY = {\n  CONFIRMED_PT: 'confirmados',\n  CONFIRMED_NORTH: 'confirmados_arsnorte',\n  CONFIRMED_CENTER: 'confirmados_arscentro',\n  CONFIRMED_LISBOA_TEJO: 'confirmados_arslvt',\n  CONFIRMED_ALENTEJO: 'confirmados_arsalentejo',\n  CONFIRMED_ALGARVE: 'confirmados_arsalgarve',\n  NEWCASES_PT: 'confirmados_novos',\n  ACTIVE_PT: 'ativos',\n  HOSPITALIZED: 'internados',\n  HOSPITALIZED_NURSERY: 'internados_enfermaria',\n  HOSPITALIZED_ICU: 'internados_uci',\n  TOWN_INCIDENCE_14: 'incidencia',\n  TOWN_CONFIRMED_14: 'confirmados_14',\n}\n\nexport default class EntriesAggregator {\n  _name: string;\n  constructor(name: string) {\n    this._name = name;\n  }\n  getAll(key: string): Entry[] {\n    console.warn(`The EntriesAggregator '${this._name}' was not properly instantiated and is trying to call getAll!`);\n    return [];\n  }\n  getLast(key: string): Entry {\n    console.warn(`The EntriesAggregator '${this._name}' was not properly instantiated and is trying to call getLastEntry!`);\n    return new Entry('', 0);\n  }\n}\n\nclass EntriesAggregatorImpl extends EntriesAggregator {\n  _aggregationMap: {[key: string]: Entry[]};\n\n  constructor(builder: EntriesAggregatorBuilder) {\n    super(builder.name);\n    this._aggregationMap = builder._aggregator;\n  }\n\n  getAll(key: string): Entry[] {\n    return this._aggregationMap[key] || [];\n  }\n\n  getLast(key: string): Entry {\n    const entries = this._aggregationMap[key];\n    return entries[entries.length - 1];\n  }\n}\n\nexport class EntriesAggregatorBuilder {\n  _name: string;\n  _aggregator: {[key: string]: Entry[]};\n\n  constructor(name: string) {\n    this._name = name;\n    this._aggregator = {};\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  addEntry(key: string, entry: Entry) {\n    const current = this._aggregator[key] || [];\n    this._aggregator[key] = [...current, entry];\n    return this;\n  }\n\n  build() {\n    return new EntriesAggregatorImpl(this);\n  }\n}","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport Entry from '../model/Entry';\nimport { EntriesAggregatorBuilder, KEY } from '../model/EntriesAggregator';\n\nfunction _getDataFromSource(sourceFile: string): Promise<Response> {\n  const url = 'https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/' + sourceFile;\n  const headers: Headers = new Headers({\n    //'Content-Type': 'application/x-www-form-urlencoded',\n    //'Origin': 'https://github.com',\n    //'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    Accept: 'application/vnd.github.v3+json',\n    // 'Access-Control-Allow-Origin': '*',\n  });\n  console.log('[_getDataFromSource] Fetching ' + sourceFile);\n  return fetch(url, { method: 'GET', headers });\n}\n\nexport function getTownData(town: string, callback: Function) {\n  const filename = 'data_concelhos_new.csv';\n  _getDataFromSource(filename)\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const builder = new EntriesAggregatorBuilder(filename);\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data =>\n          data.concelho === town\n          && [\n            KEY.TOWN_INCIDENCE_14,\n            KEY.TOWN_CONFIRMED_14\n          ].forEach(key => builder.addEntry(key, new Entry(data.data, data[key])))\n        )\n        .on('end', () => callback(builder.build()));\n    })\n    .catch(err => console.error(err));\n}\n\nexport function getPortugalData(callback: Function) {\n  const filename = 'data.csv';\n  _getDataFromSource(filename)\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const builder = new EntriesAggregatorBuilder(filename);\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => {\n          [\n            KEY.CONFIRMED_PT,\n            KEY.CONFIRMED_NORTH,\n            KEY.CONFIRMED_CENTER,\n            KEY.CONFIRMED_LISBOA_TEJO,\n            KEY.CONFIRMED_ALENTEJO,\n            KEY.CONFIRMED_ALGARVE,\n            KEY.NEWCASES_PT,\n            KEY.ACTIVE_PT,\n            KEY.HOSPITALIZED,\n            KEY.HOSPITALIZED_NURSERY,\n            KEY.HOSPITALIZED_ICU\n          ].forEach(key => builder.addEntry(key, new Entry(data.data, data[key])))\n        })\n        .on('end', () => callback(builder.build()));\n    })\n    .catch(err => console.error(err));\n}\n","import Entry from \"../model/Entry\";\n\n\nexport function getAdaptativePointRadius(entries: Entry[]): number {\n  const width = window.screen.availWidth;\n  const count = entries.length;\n  const densityRatio = count/width;\n  const densityValue = densityRatio*12;\n  const retVal = Math.max(4-densityValue, 1);\n  return retVal;\n}\n\nfunction getDateLimitFromRange(dateRange: number): Date {\n  const dateLimit = new Date();\n  dateLimit.setDate(dateLimit.getDate() - dateRange);\n  return dateLimit;\n}\n\nexport function getEntriesLineGenerator(entries: Entry[]): (v: number) => Entry[] {\n  return v => entries.map(e => new Entry(e.dateStr, v));\n}\n\nexport function getEntriesSince(dateRange: number, entries: Entry[]): Entry[] {\n  const dateLimit = getDateLimitFromRange(dateRange);\n  return entries.filter(e => e.date >= dateLimit);\n}\n\nexport function derivateEntryValues(entries: Entry[]): Entry[] {\n  let prevEntry = entries[0];\n  const newCasesEntries = [new Entry(prevEntry.dateStr, 0)];\n\n  for(let i=1; i<entries.length; i++) {\n    const currEntry = entries[i];\n    newCasesEntries.push(new Entry(currEntry.dateStr, currEntry.count - prevEntry.count));\n    prevEntry = currEntry;\n  }\n\n  return newCasesEntries;\n}\n\nexport function smoothEntryValues(entries: Entry[], strength: number = 7) {\n  return entries.map((entry, index) => {\n    const startIndex = Math.max(0, index-strength);\n    const finishIndex = Math.min(entries.length, index+strength);\n    const relevantEntries = entries.slice(startIndex, finishIndex);\n    const sum = relevantEntries.reduce((acc, e) => acc + e.count, 0);\n    return new Entry(entry.dateStr, Math.round(sum / relevantEntries.length));\n  });\n}\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Entry from \"../model/Entry\";\nimport { getAdaptativePointRadius } from './EntriesOps';\n\n/** CHART ARGUMENTS */\n\nexport const getChartData = (entries: Entry[], label: string, chosenTheme: object) => ({\n  datasets: [{\n    label,\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entries),\n    data: entries.map(entry => entry.count),\n    ...chosenTheme,\n  }],\n  labels: entries.map(entry => entry.dateStr),\n});\n\nexport const getMultipleChartData = (entriesArray: Entry[][], labels: string[], chosenThemes: object[]) => ({\n  datasets: Array.from(Array(entriesArray.length).keys()).map(i => ({\n    label: labels[i],\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entriesArray[i]),\n    data: entriesArray[i].map(entry => entry.count),\n    ...chosenThemes[i],\n  })),\n  labels: entriesArray[0].map(entry => entry.dateStr),\n});\n\nexport const getChartOptions = (beginAtZero=false, suggestedMin=null, suggestedMax=null) => ({\n  maintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      ticks: {\n        beginAtZero,\n        suggestedMin,\n        suggestedMax,\n      }\n    }]\n  },\n});\n\n/** HOF WRAPPERS */\n\nconst cardWrapper = (element: JSX.Element): JSX.Element => (\n  <Grid item xs={6} md={3}>\n    { element }\n  </Grid>\n);\n\nexport const cardGroupWrapper = (...components: JSX.Element[]): JSX.Element => (\n  <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\n    { components.map(component => cardWrapper(component)) }\n  </Grid>\n);\n\nlet key=0;\nconst chartWrapper = (chartElement: JSX.Element, styles: any): JSX.Element => (\n  <Grid item xs={12} key={key++}>\n    <div className={styles.chartContainer}>\n      {chartElement}\n    </div>\n  </Grid>\n);\n\nexport const chartGroupWrapper = (title: String, styles: any, ...components: JSX.Element[]) => (\n  <div>\n    <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n      {title}\n    </Typography>\n    <Grid container spacing={3}>\n      {components.map(component => chartWrapper(component, styles))}\n    </Grid>\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getChartOptions, getMultipleChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst MultiLineChart = ({ dataArray, dateRange, labels, themes, zeroBased }) => {\n  const lastNEntriesArray = dataArray.map(d=>getEntriesSince(dateRange, d));\n  const lastEntriesFlat = lastNEntriesArray.flatMap(eArr=>eArr.map(e=>e.count));\n  const min = Math.min(...lastEntriesFlat);\n  const max = Math.max(...lastEntriesFlat);\n  const offset = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + offset);\n\n  let suggestedMin = Math.round(min - offset);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  if(dataArray.length !== labels.length || labels.length !== themes.length) {\n    console.error('Chart arguments cardinality did not match!');\n    return <Line options={getChartOptions(false, suggestedMin, suggestedMax)}/>\n  }\n  return (\n    <Line\n      data={getMultipleChartData(lastNEntriesArray, labels, themes)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nMultiLineChart.propTypes = {\n  dataArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(Entry))).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string.isRequired),\n  themes: PropTypes.arrayOf(PropTypes.object.isRequired),\n  zeroBased: PropTypes.bool,\n};\n\nMultiLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default MultiLineChart;\n","function getThemeFromRGB(r,g,b, hasBackground=true, otherOptions={}) {\n  const unified = `${r},${g},${b}`;\n  return {\n    backgroundColor: hasBackground ? `rgba(${unified},0.4)` : 'rgba(0,0,0,0)',\n    borderColor: `rgba(${unified},1)`,\n    pointBorderColor: `rgba(${unified},1)`,\n    pointHoverBackgroundColor: `rgba(${unified},1)`,\n    ...otherOptions,\n  }\n}\n\n// CYAN\nexport const themeCyan = getThemeFromRGB(75, 192, 192);\nexport const themeCyanNoBG = getThemeFromRGB(75, 192, 192, false);\n\n\n// MAGENTA\nexport const themeMagenta = getThemeFromRGB(192, 75, 192);\nexport const themeMagentaNoBG = getThemeFromRGB(192, 75, 192, false);\nexport const themeMagentaLight = getThemeFromRGB(217, 128, 217);\nexport const themeMagentaDark = getThemeFromRGB(140, 83, 140);\n\n\n// YELLOW\nexport const themeYellow = getThemeFromRGB(192, 192, 75);\nexport const themeYellowNoBG = getThemeFromRGB(192, 192, 75, false);\nexport const themeYellowLight = getThemeFromRGB(217, 217, 128);\nexport const themeYellowDark = getThemeFromRGB(140, 140, 83);\n\n\n// BLUE\nexport const themeBlue = getThemeFromRGB(0, 80, 255);\nexport const themeBlueNoBG = getThemeFromRGB(0, 80, 255, false);\n\n\n// GREEN\nexport const themeGreen = getThemeFromRGB(0, 255, 80);\nexport const themeGreenNoBG = getThemeFromRGB(0, 255, 80, false);\n\n\n// RED\nexport const themeRed = getThemeFromRGB(255, 80, 30);\n\n\n// OTHERS\nexport const themeGreyTransparent = getThemeFromRGB(200, 200, 200, false, {pointRadius:0, pointHitRadius:0, borderDash:[8]});\n\nexport const severityTheme1 = getThemeFromRGB(255, 189, 0, false);\nexport const severityTheme2 = getThemeFromRGB(255, 84, 0, false);\nexport const severityTheme3 = getThemeFromRGB(158, 0, 89, false);\n","import { Store } from \"pullstate\";\nimport EntriesAggregator from \"../model/EntriesAggregator\";\n\nconst EntriesStore = new Store({\n  portugalEntries: new EntriesAggregator('DUMMY'),\n  trofaEntries: new EntriesAggregator('DUMMY'),\n  dateRange: 60,\n});\n\nexport default EntriesStore;\n","import { Store } from \"pullstate\";\n\nconst GeneralStore = new Store({\n  styles: {},\n});\n\nexport default GeneralStore;\n","import React from \"react\";\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport { getEntriesLineGenerator, smoothEntryValues, derivateEntryValues } from '../../utils/EntriesOps';\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport {\n  themeRed, themeYellow, themeYellowNoBG, themeCyanNoBG, themeMagentaNoBG, themeBlueNoBG, themeGreenNoBG,\n  themeGreyTransparent, severityTheme1, severityTheme2, severityTheme3\n} from \"../../config/themes\";\nimport { KEY } from \"../../model/EntriesAggregator\";\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\n\nconst NewCasesCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const trofaEntries = EntriesStore.useState(s => s.trofaEntries);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  const trofaLineGenerator = getEntriesLineGenerator(trofaEntries.getAll(KEY.TOWN_INCIDENCE_14));\n  const northEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_NORTH));\n  const centerEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_CENTER));\n  const lisbonEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_LISBOA_TEJO));\n  const alentejoEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_ALENTEJO));\n  const algarveEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_ALGARVE));\n  return chartGroupWrapper('Casos novos', styles,\n\n    // #### PORTUGAL ####\n    <MultiLineChart\n      dataArray={[ptEntries.getAll(KEY.NEWCASES_PT), smoothEntryValues(ptEntries.getAll(KEY.NEWCASES_PT))]}\n      dateRange={dateRange}\n      labels={['Casos novos em Portugal', '']}\n      themes={[themeRed, themeGreyTransparent]}\n    />,\n\n    // #### TROFA ####\n    <MultiLineChart\n      dataArray={[\n        trofaEntries.getAll(KEY.TOWN_INCIDENCE_14), trofaLineGenerator(240),\n        trofaLineGenerator(480), trofaLineGenerator(960),\n      ]}\n      dateRange={dateRange}\n      labels={[\n        'Incidência na Trofa (a 14 dias p/ 100k hab.)', 'Risco elevado',\n        'Risco muito elevado', 'Risco extremamente elevado'\n      ]}\n      themes={[themeYellow, severityTheme1, severityTheme2, severityTheme3]}\n    />,\n\n    // #### ZONAS DE PORTUGAL ####\n    <MultiLineChart\n    dataArray={[northEntries, centerEntries, lisbonEntries, alentejoEntries, algarveEntries]}\n      dateRange={dateRange}\n      labels={[\n        'Casos novos no Norte', 'Casos novos no Centro', 'Casos novos em Lisboa/V.Tejo',\n        'Casos novos no Alentejo', 'Casos novos no Algarve']}\n      themes={[themeYellowNoBG, themeMagentaNoBG, themeCyanNoBG, themeBlueNoBG, themeGreenNoBG]}\n    />,\n\n    // #### NORTE ####\n    <MultiLineChart\n    dataArray={[northEntries, smoothEntryValues(northEntries)]}\n      dateRange={dateRange}\n      labels={['Casos novos no Norte', '']}\n      themes={[themeYellow, themeGreyTransparent]}\n    />\n  );\n}\n\nexport default NewCasesCharts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getChartOptions, getChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst DefaultLineChart = ({ data, dateRange, label, theme, zeroBased }) => {\n  const lastNEntries = getEntriesSince(dateRange, data);\n  const min = Math.min(...lastNEntries.map(e=>e.count));\n  const max = Math.max(...lastNEntries.map(e=>e.count));\n  const margin = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + margin);\n\n  let suggestedMin = Math.round(min - margin);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  \n  return (\n    <Line\n      data={getChartData(lastNEntries, label, theme)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nDefaultLineChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired,\n  zeroBased: PropTypes.bool,\n};\n\nDefaultLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default DefaultLineChart;\n","import React from \"react\";\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport DefaultLineChart from \"../chart/DefaultLineChart\";\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport { themeMagenta, themeMagentaDark, themeMagentaLight } from \"../../config/themes\";\nimport { KEY } from \"../../model/EntriesAggregator\";\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\n\nconst GeneralCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  return chartGroupWrapper('Casos ativos', styles,\n    <DefaultLineChart\n      data={ptEntries.getAll(KEY.ACTIVE_PT)}\n      dateRange={dateRange}\n      label=\"Casos ativos em Portugal\"\n      theme={themeMagenta}\n      zeroBased={true}\n    />,\n    <MultiLineChart\n      dataArray={[ptEntries.getAll(KEY.HOSPITALIZED_NURSERY), ptEntries.getAll(KEY.HOSPITALIZED_ICU)]}\n      dateRange={dateRange}\n      labels={[\"Internados em Enfermaria em Portugal\", \"Internados em UCI em Portugal\"]}\n      themes={[themeMagentaLight, themeMagentaDark]}\n      zeroBased={true}\n    />\n  );\n}\n\nexport default GeneralCharts;\n","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nconst TextCard = ({ children }) => (\n  <Card>\n    <CardContent>\n      <Typography variant=\"body2\" component=\"p\">\n        { children }\n      </Typography>\n    </CardContent>\n  </Card>\n);\n\nexport default TextCard;\n","import React from 'react';\nimport { AppBar, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport EntriesStore from '../../store/EntriesStore';\nimport GeneralStore from '../../store/GeneralStore';\n\nconst MyHeader = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  return (\n    <AppBar position=\"sticky\" className={styles.appBar}>\n      <FormControl className={styles.formControl}>\n        <InputLabel id=\"time-label\">Tempo</InputLabel>\n        <Select\n          labelId=\"time-label\"\n          id=\"time-select\"\n          value={EntriesStore.useState(s => s.dateRange)}\n          onChange={e => EntriesStore.update(s => {s.dateRange = e.target.value})}\n        >\n          <MenuItem value={30}>30 dias</MenuItem>\n          <MenuItem value={60}>60 dias</MenuItem>\n          <MenuItem value={90}>90 dias</MenuItem>\n          <MenuItem value={999999}>Desde sempre</MenuItem>\n        </Select>\n      </FormControl>\n    </AppBar>\n)\n};\n\nexport default MyHeader;\n","import React from 'react';\nimport { Typography, Card, CardContent } from '@material-ui/core';\n\n\nconst MyFooter = () => (\n  <Card>\n    <CardContent>\n      <Typography variant=\"body2\" component=\"p\">\n        Os dados aqui apresentados são extraídos do repositório <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a>.\n      <br />\n      O código para este dashboard pode ser consultado <a href=\"https://github.com/DiogoDuque/covid19TrofaGraph\">aqui</a>.\n      <br />\n        {/*The data hereby presented is extracted from the <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a> repository.*/}\n      </Typography>\n    </CardContent>\n  </Card>\n);\n\nexport default MyFooter;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Typography, Card, CardContent } from '@material-ui/core';\nimport Entry from \"../../model/Entry\";\n\nconst InfoCard = ({title, entry}) => {\n\n  return (\n    <Card elevation={4}>\n      <CardContent>\n        <Typography style={{ fontSize: 15, fontWeight: 'bold' }} color=\"textSecondary\" gutterBottom>\n            {title}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {entry.count}\n        </Typography>\n        <Typography style={{ fontSize: 11 }} color=\"textSecondary\">\n          {`Última atualização: ${entry.dateStr}`}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nInfoCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  entry: PropTypes.instanceOf(Entry).isRequired,\n};\n\nexport default InfoCard;","import React from 'react';\nimport { cardGroupWrapper } from '../../utils/chartUtils';\nimport { KEY } from '../../model/EntriesAggregator';\nimport InfoCard from '../card/InfoCard';\nimport EntriesStore from \"../../store/EntriesStore\";\n\nconst SummaryCards = () => {\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const trofaEntries = EntriesStore.useState(s => s.trofaEntries);\n\n  return cardGroupWrapper(\n    <InfoCard title=\"Casos ativos em Portugal\" entry={ptEntries.getLast(KEY.ACTIVE_PT)} />,\n    <InfoCard title=\"Casos novos em Portugal\" entry={ptEntries.getLast(KEY.NEWCASES_PT)} />,\n    <InfoCard title=\"Incidência na Trofa\" entry={trofaEntries.getLast(KEY.TOWN_INCIDENCE_14)} />,\n    <InfoCard title=\"Casos novos (14d) na Trofa\" entry={trofaEntries.getLast(KEY.TOWN_CONFIRMED_14)} />,\n  );\n}\n\nexport default SummaryCards;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CircularProgress } from '@material-ui/core';\nimport EntriesAggregator, { KEY } from './model/EntriesAggregator';\nimport { getTownData, getPortugalData } from './utils/fetchData';\nimport NewCasesCharts from './component/app/NewCasesCharts';\nimport GeneralCharts from './component/app/GeneralCharts';\nimport TextCard from './component/card/TextCard';\nimport MyHeader from './component/app/MyHeader';\nimport MyFooter from './component/app/MyFooter';\nimport SummaryCards from './component/app/SummaryCards';\nimport EntriesStore from './store/EntriesStore';\nimport GeneralStore from './store/GeneralStore';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    'backgroundColor': '#f5f5f5',\n    flexGrow: 1,\n    display: 'flex',\n    'align-items': 'center',\n    'justify-content': 'center',\n    padding: 15,\n    paddingRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '50vh',\n    width: '90vw',\n  },\n  progress: {\n    float: 'none',\n    margin: '0 auto',\n  },\n  appBar: {\n    maxWidth: 170,\n    marginBottom: 20,\n    backgroundColor: '#e0e0e0',\n  },\n  formControl: {\n    margin: 10,\n    // minWidth: 120,\n  },\n}));\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  // ========== DEFINITIONS ==========\n  const styles = useStyles();\n  GeneralStore.update(s => {s.styles = styles});\n\n  const [isFetching, setIsFetching]: [boolean, Function] = useState(true);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const trofaEntries = EntriesStore.useState(s => s.trofaEntries);\n  let lastTownUpdate: string = \"\";\n  let lastPtUpdate: string = \"\";\n\n\n  // ========== LOGIC ==========\n  useEffect(() => {\n    getTownData('TROFA', (e: EntriesAggregator) => EntriesStore.update(s => {s.trofaEntries = e}));\n    getPortugalData((e: EntriesAggregator) => EntriesStore.update(s => {s.portugalEntries = e}));\n  }, []);\n\n  if (!isFetching) {\n    lastTownUpdate = trofaEntries.getLast(KEY.TOWN_INCIDENCE_14).dateStr;\n    lastPtUpdate = ptEntries.getLast(KEY.CONFIRMED_PT).dateStr;\n  }\n\n  if (isFetching && trofaEntries.getAll(KEY.TOWN_INCIDENCE_14).length > 0 && ptEntries.getAll(KEY.CONFIRMED_PT).length > 0)\n    setIsFetching(false);\n\n\n  // ========== RENDER ==========\n  return (\n    <div className={styles.root}>\n      { isFetching\n        ? <CircularProgress className={styles.progress} />\n        : <div>\n            <MyHeader />\n            <TextCard>\n              A última atualização destes dados ocorreu nas seguintes datas: {`Portugal/Norte => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.\n              </TextCard>\n\n            <br />\n\n            <SummaryCards />\n            <br/>\n            <GeneralCharts />\n            <br />\n            <NewCasesCharts />\n            <br />\n\n            <MyFooter />\n          </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}