{"version":3,"sources":["model/Entry.tsx","chart/Utils.tsx","chart/TrofaIntected.js","utils/fetchData.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Entry","date","count","_dateStr","_date","_count","this","str","dateParts","split","Date","parseInt","strToDate","isNaN","filterLastNDays","entries","n","size","length","slice","getChartData","intervalLabel","datasets","label","fill","lineTension","backgroundColor","borderColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","data","map","entry","labels","dateStr","getChartOptions","text","beginAtZero","maintainAspectRatio","title","display","fontSize","scales","yAxes","ticks","TrofaInfected","last30Entries","options","getTownData","town","callback","headers","Headers","fetch","method","then","response","status","responseData","stream","Readable","push","pipe","Csv","on","catch","err","console","error","useStyles","makeStyles","theme","root","flexGrow","marginLeft","marginRight","chartContainer","position","margin","height","width","App","classes","useState","trofaEntries","className","Typography","variant","style","textAlign","gutterBottom","Grid","container","spacing","item","xs","TrofaIntected","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20f6f26e.chunk.js","sourcesContent":["\nfunction strToDate(str: string) {\n  const dateParts = str.split('-');\n  return new Date(\n    parseInt(dateParts[2]),   // year\n    parseInt(dateParts[1])-1, // month, zero-indexed\n    parseInt(dateParts[0]),   // day\n    );\n}\n\nexport default class Entry {\n  _dateStr: string;\n  _date: Date;\n  _count: number;\n\n  constructor(date: string, count: string) {\n    this._dateStr = date;\n    this._date = strToDate(date);\n    this._count = parseInt(count);\n\n    if(isNaN(this._count))\n      this._count = 0;\n  }\n\n  get dateStr(): string {\n    return this._dateStr;\n  }\n\n  get date(): Date {\n    return this._date;\n  }\n\n  get count(): number {\n    return this._count;\n  }\n}","import Entry from \"../model/Entry\";\n\nexport function filterLastNDays(entries: Entry[], n: number) {\n  const size = entries.length;\n  if(size <= n)\n    return entries;\n  return entries.slice(size-n);\n}\n\nexport function getChartData(entries: Entry[], intervalLabel: string) {\n  return {\n    datasets: [{\n      label: intervalLabel,\n      fill: true,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      data: entries.map(entry => entry.count),\n    }],\n    labels: entries.map(entry => entry.dateStr),\n  }\n}\n\nexport function getChartOptions(text: string, beginAtZero=false) {\n  return {\n    maintainAspectRatio: false,\n    title: {\n      display: true,\n      fontSize: 15,\n      text,\n    },\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero,\n        }\n      }]\n    },\n  }\n}\n\nexport default {\n  filterLastNDays,\n  getChartData,\n  getChartOptions,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../model/Entry';\nimport { filterLastNDays, getChartOptions, getChartData } from './Utils';\n\nconst TrofaInfected = ({ data }) => {\n  const last30Entries = filterLastNDays(data, 30);\n  return (\n    <Line\n      data={getChartData(last30Entries, '30 dias')}\n      options={getChartOptions('Casos confirmados na Trofa', true)}\n    />\n  );\n}\n\nTrofaInfected.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n};\n\nexport default TrofaInfected;\n","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport Entry from '../model/Entry';\n\nexport function getTownData(town: string, callback: Function) {\n    const url: string = 'https://cors-anywhere.herokuapp.com/https://github.com/dssg-pt/covid19pt-data/raw/master/data_concelhos.csv';\n      const headers: Headers = new Headers({\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Origin': 'https://github.com',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        // 'Access-Control-Allow-Origin': '*',\n      });\n  \n      fetch(url, { method: 'GET', headers })\n        .then((response: Response) => {\n          if(response && response.status === 200)\n            return response.text();\n        })\n        .then(responseData => {\n          const entries: Entry[] = [];\n          const stream = new Readable();\n          stream.push(responseData);\n          stream.push(null);\n          stream\n            .pipe(Csv())\n            .on('data', data => entries.push(new Entry(data.data, data[town])))\n            .on('end', () => callback(entries));\n        })\n        .catch(err => console.error(err));\n  }\n\nexport default {\n    getTownData,\n}","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { Typography } from '@material-ui/core';\nimport TrofaIntected from './chart/TrofaIntected.js';\nimport Entry from './model/Entry';\nimport { getTownData } from './utils/fetchData';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    marginLeft: 10,\n    marginRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '60vh',\n    width: '90vw',\n  },\n}));\n\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  const classes = useStyles();\n\n  const [trofaEntries, setTrofaEntries]: [Entry[], Function] = useState([]);\n  getTownData('TROFA', setTrofaEntries);\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h1\" style= {{ textAlign: 'center' }} gutterBottom>\n        Covid19 @ Trofa\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <div className={classes.chartContainer}>\n            <TrofaIntected data={trofaEntries} />\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}