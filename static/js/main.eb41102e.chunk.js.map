{"version":3,"sources":["config/demographicValues.js","utils/EntriesOps.tsx","model/EntriesAggregator.tsx","model/DateEntry.tsx","model/Entry.tsx","utils/fetchData.tsx","component/card/TextCard.js","model/DateRange.tsx","store/EntriesStore.tsx","store/GeneralStore.tsx","component/app/MyHeader.js","component/app/MyFooter.js","utils/chartUtils.tsx","component/card/InfoCard.js","component/app/SummaryCards.js","component/chart/DefaultLineChart.js","component/chart/MultiLineChart.js","config/themes.js","component/app/GeneralCharts.js","component/app/PortugalCharts.js","component/app/RegionCharts.js","component/app/TownCharts.js","component/app/AgeCharts.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["POPULATION_PT","POPULATION_NORTH","POPULATION_CENTER","POPULATION_LISBOA","POPULATION_ALENTEJO","POPULATION_ALGARVE","getEntriesLineGenerator","entries","v","map","e","buildNewWith","x","getEntriesSince","dateRange","dateLimit","startDate","filter","date","derivateEntryValues","prevEntry","newCasesEntries","i","length","currEntry","push","y","smoothEntryValues","strength","entry","index","startIndex","Math","max","finishIndex","min","relevantEntries","slice","sum","reduce","acc","round","convertDailyCountToDailyIncidency","populationSize","incidency","convertDailyIncidencyToBiweeklyIncidency","xWhitelist","_entry","includes","mergeEntryValuesBySum","entries1","entries2","mergeOp","console","error","mergeEntryValues","e1","e2","CONFIRMED_EXTRA_KEYS","CONFIRMED_0_9","CONFIRMED_10_19","CONFIRMED_20_29","CONFIRMED_30_39","CONFIRMED_40_49","CONFIRMED_50_59","CONFIRMED_60_69","CONFIRMED_70_79","CONFIRMED_80_PLUS","DEAD_EXTRA_KEYS","DEAD_0_9","DEAD_10_19","DEAD_20_29","DEAD_30_39","DEAD_40_49","DEAD_50_59","DEAD_60_69","DEAD_70_79","DEAD_80_PLUS","KEY","CONFIRMED_PT","CONFIRMED_NORTH","CONFIRMED_CENTER","CONFIRMED_LISBOA_TEJO","CONFIRMED_ALENTEJO","CONFIRMED_ALGARVE","NEWCASES_PT","ACTIVE_PT","HOSPITALIZED","HOSPITALIZED_NURSERY","HOSPITALIZED_ICU","DEAD_PT","CONFIRMED_0_9_F","CONFIRMED_0_9_M","CONFIRMED_10_19_F","CONFIRMED_10_19_M","CONFIRMED_20_29_F","CONFIRMED_20_29_M","CONFIRMED_30_39_F","CONFIRMED_30_39_M","CONFIRMED_40_49_F","CONFIRMED_40_49_M","CONFIRMED_50_59_F","CONFIRMED_50_59_M","CONFIRMED_60_69_F","CONFIRMED_60_69_M","CONFIRMED_70_79_F","CONFIRMED_70_79_M","CONFIRMED_80_PLUS_F","CONFIRMED_80_PLUS_M","DEAD_0_9_F","DEAD_0_9_M","DEAD_10_19_F","DEAD_10_19_M","DEAD_20_29_F","DEAD_20_29_M","DEAD_30_39_F","DEAD_30_39_M","DEAD_40_49_F","DEAD_40_49_M","DEAD_50_59_F","DEAD_50_59_M","DEAD_60_69_F","DEAD_60_69_M","DEAD_70_79_F","DEAD_70_79_M","DEAD_80_PLUS_F","DEAD_80_PLUS_M","INCIDENCE_PT","TRANSMISSIBILITY_PT","TRANSMISSIBILITY_PT_CONTINENT","TOWN_INCIDENCE_14","TOWN_CONFIRMED_14","TOWN","REGION","VACCINE_DOSE_1","VACCINE_DOSE_2","EntriesAggregator","name","_name","this","key","warn","EntriesAggregatorImpl","builder","_aggregationMap","_aggregator","EntriesAggregatorBuilder","current","PtDataEntriesAggregatorBuilder","extraKeys","Object","forEach","entriesM","entriesF","addEntries","addByAgeGroup","incidence","preProcess","DateEntry","count","parseFloat","_date","isNaN","_y","dateStr","parts","split","Date","Number","strToDate","_x","Error","defaultParseData","data","values","addEntry","getDataFromSource","callback","parseData","filename","url","headers","Headers","Accept","log","fetch","method","makeRequest","then","response","status","text","responseData","stream","Readable","pipe","Csv","on","build","catch","err","TextCard","children","Card","CardContent","Typography","variant","component","DateRange","endDate","_startDate","_endDate","getTime","range","setTime","EntriesStore","Store","portugalEntries","townEntries","townRegionMap","vaccineEntries","fromRelativeRange","GeneralStore","styles","tab","currentTown","MyHeader","useState","isTimeDialogOpen","setTimeDialogOpen","customTimeValue","setCustomTimeValue","customTimeValueTmp","setCustomTimeValueTmp","s","validateTimeValue","n","parsedTimeValue","parseInt","isInteger","closeTimeDialog","newValue","undefined","update","isTimeValueValid","AppBar","position","className","appBar","Toolbar","FormControl","formControl","InputLabel","id","Select","labelId","value","onChange","target","nativeEvent","innerText","MenuItem","Tabs","_e","indicatorColor","textColor","aria-label","scrollButtons","Tab","label","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","autoFocus","margin","type","fullWidth","DialogActions","Button","onClick","color","disabled","MyFooter","href","getAdaptativePointRadius","width","window","screen","availWidth","densityValue","getChartData","chosenTheme","datasets","categoryPercentage","barPercentage","lineTension","borderWidth","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","pointRadius","labels","getMultipleChartData","entriesArray","chosenThemes","Array","from","keys","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","cardWrapper","element","Grid","item","xs","md","chartWrapper","chartElement","chartContainer","chartGroupWrapper","title","components","style","textAlign","gutterBottom","container","spacing","InfoCard","elevation","fontSize","fontWeight","SummaryCards","ptEntries","currTown","town","toLowerCase","last2ndVaccineEntry","getLast","direction","alignItems","justify","cardGroupWrapper","toFixed","DefaultLineChart","theme","zeroBased","lastNEntries","options","defaultProps","MultiLineChart","dataArray","themes","lastNEntriesArray","d","lastEntriesFlat","flatMap","eArr","offset","getThemeFromRGB","r","g","b","hasBackground","otherOptions","unified","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","transparentOpts","pointHitRadius","borderDash","themeCyanNoBG","themeMagenta","themeMagentaNoBG","themeMagentaLight","themeMagentaLightNoBG","themeMagentaDark","themeMagentaDarkNoBG","themeYellow","themeYellowNoBG","themeYellowDarkNoBG","themeBlue","themeBlueNoBG","themeBlueTransparent","themeBlueLightNoBG","themeGreenNoBG","themeGreenTransparent","themeRed","themeRedNoBG","themeGreyTransparent","themeDark","severityTheme1","GeneralCharts","getAll","PortugalCharts","ptEntriesIncidence","ptEntriesIncidence14","deathEntries","ptLineGenerator","RegionCharts","northEntries","centerEntries","lisbonEntries","alentejoEntries","algarveEntries","northDailyIncidencyEntries","centerDailyIncidencyEntries","lisbonDailyIncidencyEntries","alentejoDailyIncidencyEntries","algarveDailyIncidencyEntries","TownCharts","currRegion","allTownEntries","currTownEntries","regionEntries","region","regionToKey","CircularProgress","townEntriesIncidence14","daysToConsider","regionEntriesIncidence14","regionToPopulation","townLineGenerator","Autocomplete","renderInput","params","AgeCharts","new0_9","new10_19","new20_29","new30_39","new40_49","new50_59","new60_69","new70_plus","newDailyIncidency0_9","newDailyIncidency10_19","newDailyIncidency20_29","newDailyIncidency30_39","newDailyIncidency40_49","newDailyIncidency50_59","newDailyIncidency60_69","newDailyIncidency70_plus","dead0_9","dead10_19","dead20_29","dead30_39","dead40_49","dead50_59","dead60_69","dead70_plus","a","useStyles","makeStyles","root","flexGrow","padding","paddingRight","height","progress","float","marginBottom","minWidth","App","isFetching","setIsFetching","renderTime","setRenderTime","lastTownUpdate","lastPtUpdate","tabContent","getTabContent","isPtDataReady","useEffect","getVaccineData","_b","fromEntries","getTownData","regionMap","performance","now","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb41102e.chunk.js","sourcesContent":["// Data retrieved from:\n// https://www.pordata.pt/Municipios/Popula%c3%a7%c3%a3o+residente+segundo+os+Censos+total+e+por+dimens%c3%a3o+dos+lugares-24\nexport const POPULATION_PT =       10562178;\nexport const POPULATION_NORTH =     3689682;\nexport const POPULATION_CENTER =    2327755;\nexport const POPULATION_LISBOA =    2821876;\nexport const POPULATION_ALENTEJO =   757302;\nexport const POPULATION_ALGARVE =    451006;\n// https://www.pordata.pt/Municipios/Popula%c3%a7%c3%a3o+residente+segundo+os+Censos+total+e+por+grupo+et%c3%a1rio-19\nexport const POPULATION_0_9 =       482647 + 525087;\nexport const POPULATION_10_19 =     564595 + 565250;\nexport const POPULATION_20_29 =     582065 + 656076;\nexport const POPULATION_30_39 =     773567 + 824683;\nexport const POPULATION_40_49 =     73098 + 770294;\nexport const POPULATION_50_59 =     722360 + 677651;\nexport const POPULATION_60_69 =     634741 + 551701;\nexport const POPULATION_70_PLUS =   496438 + 961925;\n\nexport function regionToPopulation(region) {\n  switch (region) {\n    case 'Norte':\n      return POPULATION_NORTH;\n    case 'Centro':\n      return POPULATION_CENTER;\n    case 'Lisboa e Vale do Tejo':\n      return POPULATION_LISBOA;\n    case 'Alentejo':\n      return POPULATION_ALENTEJO;\n    case 'Algarve':\n      return POPULATION_ALGARVE;\n    default:\n      return 0;\n  }\n}\n","import Entry from \"../model/Entry\";\nimport DateEntry from \"../model/DateEntry\";\nimport DateRange from \"../model/DateRange\";\n\nexport function getEntriesLineGenerator<X>(entries: Entry<X>[]): (v: number) => Entry<X>[] {\n  return v => entries.map(e => e.buildNewWith(e.x, v));\n}\n\nexport function getEntriesSince(dateRange: DateRange, entries: DateEntry[]): DateEntry[] {\n  const dateLimit = dateRange.startDate;\n  return entries.filter(e => e.date >= dateLimit);\n}\n\nexport function derivateEntryValues<X>(entries: Entry<X>[]): Entry<X>[] {\n  let prevEntry = entries[0];\n  const newCasesEntries = [prevEntry.buildNewWith(prevEntry.x, 0)];\n\n  for(let i=1; i<entries.length; i++) {\n    const currEntry = entries[i];\n    newCasesEntries.push(prevEntry.buildNewWith(currEntry.x, currEntry.y - prevEntry.y));\n    prevEntry = currEntry;\n  }\n\n  return newCasesEntries;\n}\n\nexport function smoothEntryValues<X>(entries: Entry<X>[], strength: number = 7): Entry<X>[] {\n  return entries.map((entry, index) => {\n    const startIndex = Math.max(0, index-strength);\n    const finishIndex = Math.min(entries.length, index+strength);\n    const relevantEntries = entries.slice(startIndex, finishIndex);\n    const sum = relevantEntries.reduce((acc, e) => acc + e.y, 0);\n    return entry.buildNewWith(entry.x, Math.round(sum / relevantEntries.length));\n  });\n}\n\nexport function convertDailyCountToDailyIncidency<X>(entries: Entry<X>[], populationSize: number): Entry<X>[] {\n  return entries.map(entry => {\n    const incidency = Math.round(entry.y * 100000 / populationSize);\n    return entry.buildNewWith(entry.x, incidency);\n  });\n}\n\nexport function convertDailyIncidencyToBiweeklyIncidency<X>(entries: Entry<X>[], xWhitelist: X[] = []): Entry<X>[] {\n  return entries\n  .map((entry, index) => {\n    if(index < 13)\n      return entry; // value does not matter, as it will be filtered out after.\n    return entry.buildNewWith(\n      entry.x,\n      entries.slice(index-13, index+1).reduce((acc, e) => acc + e.y, 0)\n    );\n  })\n  .filter((_entry, index) => index >= 13)\n  .filter(e => xWhitelist.includes(e.x));\n}\n\nfunction mergeEntryValues<E extends Entry<string>>(entries1: E[], entries2: E[], mergeOp: (e1: E, e2: E) => E) {\n  if((entries1.length !== entries2.length) || (entries1[0].x !== entries2[0].x)) {\n    console.error(`The two Entry[] don't seem mergeable!\\n${entries1}\\n${entries2}`);\n    return [];\n  }\n\n  const entries: E[] = [];\n  for(let i=0; i<entries1.length; i++) {\n    entries.push(mergeOp(entries1[i], entries2[i]));\n  }\n  return entries;\n}\n\nexport function mergeEntryValuesBySum(entries1: Entry<string>[], entries2: Entry<string>[]): Entry<string>[] {\n  return mergeEntryValues(entries1, entries2, (e1, e2) => e1.buildNewWith(e1.x, e1.y + e2.y));\n}\n","import { POPULATION_PT } from '../config/demographicValues';\nimport { convertDailyCountToDailyIncidency, mergeEntryValuesBySum } from '../utils/EntriesOps';\nimport DateEntry from './DateEntry';\nimport Entry from './Entry';\n\nconst CONFIRMED_KEYS = {\n  CONFIRMED_0_9_F: 'confirmados_0_9_f',\n  CONFIRMED_0_9_M: 'confirmados_0_9_m',\n  CONFIRMED_10_19_F: 'confirmados_10_19_f',\n  CONFIRMED_10_19_M: 'confirmados_10_19_m',\n  CONFIRMED_20_29_F: 'confirmados_20_29_f',\n  CONFIRMED_20_29_M: 'confirmados_20_29_m',\n  CONFIRMED_30_39_F: 'confirmados_30_39_f',\n  CONFIRMED_30_39_M: 'confirmados_30_39_m',\n  CONFIRMED_40_49_F: 'confirmados_40_49_f',\n  CONFIRMED_40_49_M: 'confirmados_40_49_m',\n  CONFIRMED_50_59_F: 'confirmados_50_59_f',\n  CONFIRMED_50_59_M: 'confirmados_50_59_m',\n  CONFIRMED_60_69_F: 'confirmados_60_69_f',\n  CONFIRMED_60_69_M: 'confirmados_60_69_m',\n  CONFIRMED_70_79_F: 'confirmados_70_79_f',\n  CONFIRMED_70_79_M: 'confirmados_70_79_m',\n  CONFIRMED_80_PLUS_F: 'confirmados_80_plus_f',\n  CONFIRMED_80_PLUS_M: 'confirmados_80_plus_m',\n};\n\nconst CONFIRMED_EXTRA_KEYS = {\n  CONFIRMED_0_9: 'confirmados_0_9',\n  CONFIRMED_10_19: 'confirmados_10_19',\n  CONFIRMED_20_29: 'confirmados_20_29',\n  CONFIRMED_30_39: 'confirmados_30_39',\n  CONFIRMED_40_49: 'confirmados_40_49',\n  CONFIRMED_50_59: 'confirmados_50_59',\n  CONFIRMED_60_69: 'confirmados_60_69',\n  CONFIRMED_70_79: 'confirmados_70_79',\n  CONFIRMED_80_PLUS: 'confirmados_80_plus',\n};\n\nconst DEAD_KEYS = {\n  DEAD_0_9_F: 'obitos_0_9_f',\n  DEAD_0_9_M: 'obitos_0_9_m',\n  DEAD_10_19_F: 'obitos_10_19_f',\n  DEAD_10_19_M: 'obitos_10_19_m',\n  DEAD_20_29_F: 'obitos_20_29_f',\n  DEAD_20_29_M: 'obitos_20_29_m',\n  DEAD_30_39_F: 'obitos_30_39_f',\n  DEAD_30_39_M: 'obitos_30_39_m',\n  DEAD_40_49_F: 'obitos_40_49_f',\n  DEAD_40_49_M: 'obitos_40_49_m',\n  DEAD_50_59_F: 'obitos_50_59_f',\n  DEAD_50_59_M: 'obitos_50_59_m',\n  DEAD_60_69_F: 'obitos_60_69_f',\n  DEAD_60_69_M: 'obitos_60_69_m',\n  DEAD_70_79_F: 'obitos_70_79_f',\n  DEAD_70_79_M: 'obitos_70_79_m',\n  DEAD_80_PLUS_F: 'obitos_80_plus_f',\n  DEAD_80_PLUS_M: 'obitos_80_plus_m',\n};\n\nconst DEAD_EXTRA_KEYS = {\n  DEAD_0_9: 'obitos_0_9',\n  DEAD_10_19: 'obitos_10_19',\n  DEAD_20_29: 'obitos_20_29',\n  DEAD_30_39: 'obitos_30_39',\n  DEAD_40_49: 'obitos_40_49',\n  DEAD_50_59: 'obitos_50_59',\n  DEAD_60_69: 'obitos_60_69',\n  DEAD_70_79: 'obitos_70_79',\n  DEAD_80_PLUS: 'obitos_80_plus',\n};\n\nexport const KEY = {\n  // data.csv\n  CONFIRMED_PT: 'confirmados',\n  CONFIRMED_NORTH: 'confirmados_arsnorte',\n  CONFIRMED_CENTER: 'confirmados_arscentro',\n  CONFIRMED_LISBOA_TEJO: 'confirmados_arslvt',\n  CONFIRMED_ALENTEJO: 'confirmados_arsalentejo',\n  CONFIRMED_ALGARVE: 'confirmados_arsalgarve',\n  NEWCASES_PT: 'confirmados_novos',\n  ACTIVE_PT: 'ativos',\n  HOSPITALIZED: 'internados',\n  HOSPITALIZED_NURSERY: 'internados_enfermaria',\n  HOSPITALIZED_ICU: 'internados_uci',\n  DEAD_PT: 'obitos',\n  ...CONFIRMED_KEYS,\n  ...DEAD_KEYS,\n\n  // data.csv extra\n  ...CONFIRMED_EXTRA_KEYS,\n  ...DEAD_EXTRA_KEYS,\n  INCIDENCE_PT: 'incidencia_pt',\n  TRANSMISSIBILITY_PT: 'rt_nacional',\n  TRANSMISSIBILITY_PT_CONTINENT: 'rt_continente',\n\n  // data_concelhos_new.csv\n  TOWN_INCIDENCE_14: 'incidencia',\n  TOWN_CONFIRMED_14: 'confirmados_14',\n  TOWN: 'concelho',\n  REGION: 'ars',\n\n  //vacinas.csv\n  VACCINE_DOSE_1: 'doses1',\n  VACCINE_DOSE_2: 'doses2',\n}\n\nexport function regionToKey(region: string) {\n  switch (region) {\n    case 'Norte':\n      return KEY.CONFIRMED_NORTH;\n    case 'Centro':\n      return KEY.CONFIRMED_CENTER;\n    case 'Lisboa e Vale do Tejo':\n      return KEY.CONFIRMED_LISBOA_TEJO;\n    case 'Alentejo':\n      return KEY.CONFIRMED_ALENTEJO;\n    case 'Algarve':\n      return KEY.CONFIRMED_ALGARVE;\n    default:\n      return '';\n  }\n}\n\nexport default class EntriesAggregator<X, E extends Entry<X>> {\n  _name: string;\n  constructor(name: string) {\n    this._name = name;\n  }\n  getAll(key: string): E[] {\n    console.warn(`The EntriesAggregator '${this._name}' was not properly instantiated and is trying to call getAll!`);\n    return [];\n  }\n  getLast(key: string): any {\n    console.warn(`The EntriesAggregator '${this._name}' was not properly instantiated and is trying to call getLastEntry!`);\n    return null;\n  }\n}\n\nclass EntriesAggregatorImpl<X, E extends Entry<X>> extends EntriesAggregator<X, E> {\n  _aggregationMap: {[key: string]: E[]};\n\n  constructor(builder: EntriesAggregatorBuilder<X, E>) {\n    super(builder.name);\n    this._aggregationMap = builder._aggregator;\n  }\n\n  getAll(key: string): E[] {\n    return this._aggregationMap[key] || [];\n  }\n\n  getLast(key: string): E {\n    const entries = this._aggregationMap[key];\n    return entries[entries.length - 1];\n  }\n}\n\nexport class EntriesAggregatorBuilder<X, E extends Entry<X>> {\n  _name: string;\n  _aggregator: {[key: string]: E[]};\n\n  constructor(name: string) {\n    this._name = name;\n    this._aggregator = {};\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  addEntry(key: string, entry: E) {\n    const current = this._aggregator[key] || [];\n    this._aggregator[key] = [...current, entry];\n    return this;\n  }\n\n  addEntries(key: string, entries: E[]) {\n    const current = this._aggregator[key] || [];\n    this._aggregator[key] = [...current, ...entries];\n    return this;\n  }\n\n  build(): EntriesAggregatorImpl<X, E> {\n    return new EntriesAggregatorImpl(this);\n  }\n}\n\nexport class PtDataEntriesAggregatorBuilder extends EntriesAggregatorBuilder<string, DateEntry> {\n  addByAgeGroup(extraKeys: Object) {\n    Object.entries(extraKeys).forEach(([, v]) => {\n      const entriesM: DateEntry[] = this._aggregator[`${v}_m`];\n      const entriesF: DateEntry[] = this._aggregator[`${v}_f`];\n      this.addEntries(v, mergeEntryValuesBySum(entriesM, entriesF) as DateEntry[]);\n    });\n  }\n\n  preProcess() {\n    this.addByAgeGroup(DEAD_EXTRA_KEYS);\n    this.addByAgeGroup(CONFIRMED_EXTRA_KEYS);\n    \n    const incidence: DateEntry[] = convertDailyCountToDailyIncidency(this._aggregator[KEY.NEWCASES_PT], POPULATION_PT) as DateEntry[];\n    this.addEntries(KEY.INCIDENCE_PT, incidence);\n  }\n\n  build(): EntriesAggregatorImpl<string, DateEntry> {\n    this.preProcess();\n    return new EntriesAggregatorImpl(this);\n  }\n}","import Entry from \"./Entry\";\n\nfunction strToDate(dateStr: string): Date {\n  const parts = dateStr.split('-');\n  return new Date(Number(parts[2]), Number(parts[1])-1, Number(parts[0]));\n}\n\nexport function dateToStr(date: Date): string {\n  return `${date.getDate()}-${date.getMonth()}-${date.getFullYear()}`;\n}\n\nexport default class DateEntry extends Entry<string> {\n  _date: Date;\n\n  constructor(date: string, count: string|number) {\n    super(date, typeof count === 'number' ? count : parseFloat(count));\n    if(isNaN(this._y))\n      this._y = 0;\n\n    this._date = strToDate(date);\n  }\n\n  get dateStr(): string {\n    return this._x;\n  }\n\n  get date(): Date {\n    return this._date;\n  }\n\n  get count(): number {\n    return this._y;\n  }\n\n  buildNewWith(x: string, y: number): DateEntry {\n    return new DateEntry(x, y);\n  }\n}","\nexport default class Entry<X> {\n  protected _x: X;\n  protected _y: number;\n\n  constructor(x: X, y: number) {\n    this._x = x;\n    this._y = y;\n  }\n\n  \n  public get x() : X {\n    return this._x;\n  }\n  \n  public get y() : number {\n    return this._y;\n  }\n\n  buildNewWith(x: X, y: number): Entry<X> {\n    throw new Error('Method buildNewWith() is not implemented!');\n  }\n}","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport DateEntry from '../model/DateEntry';\nimport { EntriesAggregatorBuilder, PtDataEntriesAggregatorBuilder, KEY } from '../model/EntriesAggregator';\n\nfunction makeRequest(filename: string): Promise<Response> {\n  const url = 'https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/' + filename;\n  const headers: Headers = new Headers({\n    Accept: 'application/vnd.github.v3+json',\n  });\n  console.log('[getDataFromSource] Fetching ' + filename);\n  return fetch(url, { method: 'GET', headers })\n}\n\nfunction defaultParseData(builder: EntriesAggregatorBuilder<string, DateEntry>, data: any) {\n  Object.values(KEY)\n    .filter(key => data[key])\n    .forEach(key => builder.addEntry(key, new DateEntry(data.data, data[key])));\n}\n\nfunction getDataFromSource(builder: EntriesAggregatorBuilder<string, DateEntry>,\n  callback: Function, parseData: Function) {\n  makeRequest(builder.name)\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => parseData(builder, data))\n        .on('end', () => {\n          console.log('[getDataFromSource] Parsed ' + builder.name);\n          callback(builder.build());\n        });\n    })\n    .catch(err => console.error(err));;\n}\n\nexport function getTownData(town: string, callback: Function) {\n  const filename = 'data_concelhos_new.csv';\n  const townEntries: { [key: string]: EntriesAggregatorBuilder<string, DateEntry> } = {};\n  const townRegionMap: { [key: string]: string } = {};\n\n  const parseData = (_b: EntriesAggregatorBuilder<string, DateEntry>, data: any) => {\n    const town = data[KEY.TOWN];\n    const region = data[KEY.REGION];\n    if (!townEntries[town]) {\n      townEntries[town] = new EntriesAggregatorBuilder<string, DateEntry>(`${filename}:${town}`);\n      townRegionMap[town] = region;\n    }\n    defaultParseData(townEntries[town], data);\n  };\n\n  const onEnd = (_b: any) => callback(\n    Object.fromEntries(Object.entries(townEntries).map(\n      ([k, b]) => [k, b.build()]\n    )),\n    townRegionMap,\n  );\n\n  getDataFromSource(\n    new EntriesAggregatorBuilder(filename),\n    onEnd,\n    parseData\n  );\n}\n\nexport function getPortugalData(callback: Function) {\n  const filename = 'data.csv';\n  getDataFromSource(\n    new PtDataEntriesAggregatorBuilder(filename),\n    callback,\n    defaultParseData\n  );\n}\n\nexport function getVaccineData(callback: Function) {\n  const filename = 'vacinas.csv';\n  getDataFromSource(\n    new EntriesAggregatorBuilder(filename),\n    callback,\n    defaultParseData\n  );\n}\n","import React from 'react';\nimport { Card, CardContent, Typography } from '@material-ui/core';\n\nconst TextCard = ({ children }) => (\n  <Card>\n    <CardContent>\n      <Typography variant=\"body2\" component=\"p\">\n        { children }\n      </Typography>\n    </CardContent>\n  </Card>\n);\n\nexport default TextCard;\n","\nexport default class DateRange {\n  private _startDate: Date;\n  private _endDate: Date;\n\n  constructor(startDate: Date, endDate: Date = new Date()) {\n    this._startDate = startDate;\n    this._endDate = endDate;\n  }\n\n  get startDate() {\n    return this._startDate;\n  }\n\n  get endDate() {\n    return this._endDate;\n  }\n\n  get range() {\n    return (this.endDate.getTime() - this.startDate.getTime())/(24*60*60*1000)\n  }\n\n  static fromRelativeRange(range: number) {\n    const endDate: Date = new Date();\n    const startDate: Date = new Date();\n    startDate.setTime(startDate.getTime() - range*24*60*60*1000);\n    return new this(startDate, endDate);\n  }\n}\n","import { Store } from \"pullstate\";\nimport DateEntry from \"../model/DateEntry\";\nimport DateRange from \"../model/DateRange\";\nimport EntriesAggregator from \"../model/EntriesAggregator\";\n\nconst EMPTY_TOWN_ENTRIES: {[key: string]: EntriesAggregator<string, DateEntry>} = {};\nconst EMPTY_REGION_MAP: {[key: string]: string} = {};\n\nconst EntriesStore = new Store({\n  portugalEntries: new EntriesAggregator('DUMMY-PT'),\n  townEntries: EMPTY_TOWN_ENTRIES,\n  townRegionMap: EMPTY_REGION_MAP,\n  vaccineEntries: new EntriesAggregator('DUMMY-VAC'),\n  dateRange: DateRange.fromRelativeRange(60),\n});\n\nexport default EntriesStore;\n","import { Store } from \"pullstate\";\n\nconst GeneralStore = new Store({\n  styles: {},\n  tab: 0,\n  currentTown: 'TROFA',\n});\n\nexport default GeneralStore;\n","import React, { useState } from 'react';\nimport {\n  AppBar, FormControl, InputLabel, Select, MenuItem, Tab, Tabs, Toolbar, Button,\n  Dialog, DialogTitle, DialogActions, DialogContent, TextField,\n} from '@material-ui/core';\nimport EntriesStore from '../../store/EntriesStore';\nimport GeneralStore from '../../store/GeneralStore';\nimport DateRange from '../../model/DateRange';\n\nconst MyHeader = () => {\n  const [isTimeDialogOpen, setTimeDialogOpen] = useState(false);\n  const [customTimeValue, setCustomTimeValue] = useState(0);\n  const [customTimeValueTmp, setCustomTimeValueTmp] = useState(0);\n  const styles = GeneralStore.useState(s => s.styles);\n\n  const validateTimeValue = n => {\n    const parsedTimeValue = parseInt(n);\n    return !isNaN(n) && Number.isInteger(parsedTimeValue) & parsedTimeValue > 0;\n  };\n\n  const onTabChange = (_e, v) => GeneralStore.update(s => { s.tab = v });\n\n  const closeTimeDialog = (newValue = undefined) => {\n    if (validateTimeValue(newValue)) {\n      setCustomTimeValue(newValue);\n      EntriesStore.update(s => { s.dateRange = DateRange.fromRelativeRange(parseInt(newValue)) });\n    } else {\n      setCustomTimeValue();\n    }\n    setTimeDialogOpen(false);\n  };\n\n  const onTimeChange = e => {\n    const value = e.target.value;\n    const innerText = e.nativeEvent.target.innerText;\n    if (innerText === 'Outro')\n      setTimeDialogOpen(true);\n    else {\n      EntriesStore.update(s => { s.dateRange = DateRange.fromRelativeRange(value) });\n      setCustomTimeValue();\n    }\n\n  };\n\n  const isTimeValueValid = validateTimeValue(customTimeValueTmp);\n\n  return (\n    <AppBar position=\"sticky\" className={styles.appBar}>\n      <Toolbar>\n        <FormControl className={styles.formControl}>\n          <InputLabel id=\"time-selector\">Tempo</InputLabel>\n          <Select\n            labelId=\"time-selector\"\n            id=\"time-select\"\n            value={EntriesStore.useState(s => s.dateRange).range}\n            onChange={onTimeChange}\n          >\n            <MenuItem value={30}>30 dias</MenuItem>\n            <MenuItem value={60}>60 dias</MenuItem>\n            <MenuItem value={90}>90 dias</MenuItem>\n            <MenuItem value={999999}>Desde sempre</MenuItem>\n            <MenuItem value={customTimeValue}>Outro</MenuItem>\n          </Select>\n        </FormControl>\n        <Tabs\n          value={GeneralStore.useState(s => s.tab)}\n          onChange={onTabChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          aria-label=\"my tabs\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n        >\n          <Tab label=\"Gráficos Gerais\" />\n          <Tab label=\"Gráficos Detalhados\" />\n          <Tab label=\"Infos\" />\n        </Tabs>\n      </Toolbar>\n      <Dialog open={isTimeDialogOpen} onClose={closeTimeDialog} aria-labelledby=\"time-dialog-title\">\n        <DialogTitle id=\"form-dialog-title\">Define um valor de tempo</DialogTitle>\n        <DialogContent>\n          <TextField\n            error={!isTimeValueValid}\n            autoFocus\n            margin=\"dense\"\n            id=\"time-value\"\n            label=\"Tempo (número inteiro)\"\n            type=\"numeric\"\n            fullWidth\n            onChange={e => setCustomTimeValueTmp(e.target.value)}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => closeTimeDialog(customTimeValue)} color=\"primary\">\n            Cancelar\n              </Button>\n          <Button onClick={() => closeTimeDialog(customTimeValueTmp)} color=\"primary\" disabled={!isTimeValueValid}>\n            Definir\n              </Button>\n        </DialogActions>\n      </Dialog>\n    </AppBar>\n  );\n};\n\nexport default MyHeader;\n","import React from 'react';\nimport { Typography, Card, CardContent } from '@material-ui/core';\n\n\nconst MyFooter = () => (\n  <Card>\n    <CardContent>\n      <Typography variant=\"body2\" component=\"p\">\n        Os dados aqui apresentados são extraídos do repositório <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a>.\n      <br />\n      O código para este dashboard pode ser consultado <a href=\"https://github.com/DiogoDuque/covid19TrofaGraph\">aqui</a>.\n      <br />\n        {/*The data hereby presented is extracted from the <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a> repository.*/}\n      </Typography>\n    </CardContent>\n  </Card>\n);\n\nexport default MyFooter;\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport Entry from \"../model/Entry\";\n\nfunction getAdaptativePointRadius<X>(entries: Entry<X>[]): number {\n  const width = window.screen.availWidth;\n  const count = entries.length;\n  const densityRatio = count/width;\n  const densityValue = densityRatio*12;\n  const retVal = Math.max(4-densityValue, 1);\n  return retVal;\n}\n\n/** CHART ARGUMENTS */\n\nexport const getChartData = <X extends unknown>(entries: Entry<X>[], label: string, chosenTheme: object) => ({\n  datasets: [{\n    label,\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entries),\n    data: entries.map(entry => entry.y),\n    ...chosenTheme,\n  }],\n  labels: entries.map(entry => entry.x),\n});\n\nexport const getMultipleChartData = <X extends unknown>(entriesArray: Entry<X>[][], labels: string[], chosenThemes: object[]) => ({\n  datasets: Array.from(Array(entriesArray.length).keys()).map(i => ({\n    label: labels[i],\n    categoryPercentage: 1.0,\n    barPercentage: 0.95,\n    lineTension: 0.1,\n    borderWidth: 2,\n    pointBackgroundColor: '#fff',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointRadius: getAdaptativePointRadius(entriesArray[i]),\n    data: entriesArray[i].map(entry => entry.y),\n    ...chosenThemes[i],\n  })),\n  labels: entriesArray[0].map(entry => entry.x),\n});\n\nexport const getChartOptions = (beginAtZero=false, suggestedMin=null, suggestedMax=null) => ({\n  maintainAspectRatio: false,\n  scales: {\n    yAxes: [{\n      ticks: {\n        beginAtZero,\n        suggestedMin,\n        suggestedMax,\n      }\n    }]\n  },\n});\n\n/** HOF WRAPPERS */\nlet key=0;\nconst cardWrapper = (element: JSX.Element): JSX.Element => (\n  <Grid key={key++} item xs={6} md={3}>\n    { element }\n  </Grid>\n);\n\nexport const cardGroupWrapper = (...components: JSX.Element[]): JSX.Element => (\n  <Grid container spacing={1} direction=\"row\" alignItems=\"center\" justify=\"center\">\n    { components.map(component => cardWrapper(component)) }\n  </Grid>\n);\n\nconst chartWrapper = (chartElement: JSX.Element, styles: any): JSX.Element => (\n  <Grid item xs={12} key={key++}>\n    <div className={styles.chartContainer}>\n      {chartElement}\n    </div>\n  </Grid>\n);\n\nexport const chartGroupWrapper = (title: String, styles: any, ...components: JSX.Element[]) => (\n  <div>\n    <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n      {title}\n    </Typography>\n    <Grid container spacing={3}>\n      {components.map(component => chartWrapper(component, styles))}\n    </Grid>\n  </div>\n);\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { Typography, Card, CardContent } from '@material-ui/core';\nimport DateEntry from \"../../model/DateEntry\";\n\nconst InfoCard = ({title, entry}) => {\n\n  return (\n    <Card elevation={4}>\n      <CardContent>\n        <Typography style={{ fontSize: 15, fontWeight: 'bold' }} color=\"textSecondary\" gutterBottom>\n            {title}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {entry.count}\n        </Typography>\n        <Typography style={{ fontSize: 11 }} color=\"textSecondary\">\n          {`Última atualização: ${entry.dateStr}`}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nInfoCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  entry: PropTypes.instanceOf(DateEntry).isRequired,\n};\n\nexport default InfoCard;","import React from 'react';\nimport { cardGroupWrapper } from '../../utils/chartUtils';\nimport { KEY } from '../../model/EntriesAggregator';\nimport InfoCard from '../card/InfoCard';\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\nimport { POPULATION_PT } from \"../../config/demographicValues\";\n\nconst vaccineEntryToPercentage = e => e.buildNewWith(e.x, parseFloat(Number(100 * e.y / POPULATION_PT).toFixed(2)));\n\nconst SummaryCards = () => {\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  let currTown = GeneralStore.useState(s => s.currentTown);\n  const townEntries = EntriesStore.useState(s => s.townEntries[currTown]);\n  const town = currTown[0] + currTown.slice(1).toLowerCase();\n  const vaccineEntries = EntriesStore.useState(s => s.vaccineEntries);\n  const last2ndVaccineEntry = vaccineEntries.getLast(KEY.VACCINE_DOSE_2);\n\n  return cardGroupWrapper(\n    <InfoCard title=\"Casos ativos em Portugal\" entry={ptEntries.getLast(KEY.ACTIVE_PT)} />,\n    <InfoCard title=\"Casos novos em Portugal\" entry={ptEntries.getLast(KEY.NEWCASES_PT)} />,\n    <InfoCard title=\"R(t) em Portugal Continental\" entry={ptEntries.getLast(KEY.TRANSMISSIBILITY_PT_CONTINENT)} />,\n    <InfoCard title=\"% de vacinados com 2 doses\" entry={vaccineEntryToPercentage(last2ndVaccineEntry)} />,\n    <InfoCard title={`Incidência - ${town}`} entry={townEntries.getLast(KEY.TOWN_INCIDENCE_14)} />,\n    <InfoCard title={`Casos novos - ${town} (14d)`} entry={townEntries.getLast(KEY.TOWN_CONFIRMED_14)} />,\n  );\n}\n\nexport default SummaryCards;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport DateRange from '../../model/DateRange';\nimport DateEntry from '../../model/DateEntry';\nimport { getChartOptions, getChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst DefaultLineChart = ({ data, dateRange, label, theme, zeroBased }) => {\n  const lastNEntries = getEntriesSince(dateRange, data);\n  const min = Math.min(...lastNEntries.map(e=>e.count));\n  const max = Math.max(...lastNEntries.map(e=>e.count));\n  const margin = Math.max((max - min)/20, 2);\n\n  const suggestedMax = Math.round(max + margin);\n\n  let suggestedMin = Math.round(min - margin);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  \n  return (\n    <Line\n      data={getChartData(lastNEntries, label, theme)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nDefaultLineChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(DateEntry)).isRequired,\n  dateRange: PropTypes.instanceOf(DateRange).isRequired,\n  label: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired,\n  zeroBased: PropTypes.bool,\n};\n\nDefaultLineChart.defaultProps = {\n  zeroBased: true,\n};\n\nexport default DefaultLineChart;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport DateRange from '../../model/DateRange';\nimport DateEntry from '../../model/DateEntry';\nimport { getChartOptions, getMultipleChartData } from '../../utils/chartUtils';\nimport { getEntriesSince } from '../../utils/EntriesOps';\n\nconst MultiLineChart = ({ dataArray, dateRange, labels, themes, zeroBased }) => {\n  const lastNEntriesArray = dataArray.map(d=>getEntriesSince(dateRange, d));\n  const lastEntriesFlat = lastNEntriesArray.flatMap(eArr=>eArr.map(e=>e.count));\n  const min = Math.min(...lastEntriesFlat);\n  const max = Math.max(...lastEntriesFlat);\n  const offset = (max - min)/15;\n\n  const suggestedMax = max + offset;\n\n  let suggestedMin = min - offset;\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  if(dataArray.length !== labels.length || labels.length !== themes.length) {\n    console.error('Chart arguments cardinality did not match!');\n    return <Line options={getChartOptions(false, suggestedMin, suggestedMax)}/>\n  }\n  return (\n    <Line\n      data={getMultipleChartData(lastNEntriesArray, labels, themes)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nMultiLineChart.propTypes = {\n  dataArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(DateEntry))).isRequired,\n  dateRange: PropTypes.instanceOf(DateRange).isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string.isRequired),\n  themes: PropTypes.arrayOf(PropTypes.object.isRequired),\n  zeroBased: PropTypes.bool,\n};\n\nMultiLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default MultiLineChart;\n","function getThemeFromRGB(r,g,b, hasBackground=true, otherOptions={}) {\n  const unified = `${r},${g},${b}`;\n  return {\n    backgroundColor: hasBackground ? `rgba(${unified},0.4)` : 'rgba(0,0,0,0)',\n    borderColor: `rgba(${unified},1)`,\n    pointBorderColor: `rgba(${unified},1)`,\n    pointHoverBackgroundColor: `rgba(${unified},1)`,\n    ...otherOptions,\n  }\n}\n\nconst transparentOpts = {pointRadius:0, pointHitRadius:0, borderDash:[8]};\n\n// CYAN\nexport const themeCyan = getThemeFromRGB(75, 192, 192);\nexport const themeCyanNoBG = getThemeFromRGB(75, 192, 192, false);\n\n\n// MAGENTA\nexport const themeMagenta = getThemeFromRGB(192, 75, 192);\nexport const themeMagentaNoBG = getThemeFromRGB(192, 75, 192, false);\nexport const themeMagentaLight = getThemeFromRGB(217, 128, 217);\nexport const themeMagentaLightNoBG = getThemeFromRGB(217, 128, 217, false);\nexport const themeMagentaDark = getThemeFromRGB(140, 83, 140);\nexport const themeMagentaDarkNoBG = getThemeFromRGB(140, 83, 140, false);\n\n\n// YELLOW\nexport const themeYellow = getThemeFromRGB(192, 192, 75);\nexport const themeYellowNoBG = getThemeFromRGB(192, 192, 75, false);\nexport const themeYellowLight = getThemeFromRGB(217, 217, 128);\nexport const themeYellowLightNoBG = getThemeFromRGB(217, 217, 128, false);\nexport const themeYellowDark = getThemeFromRGB(140, 140, 83);\nexport const themeYellowDarkNoBG = getThemeFromRGB(140, 140, 83, false);\n\n\n// BLUE\nexport const themeBlue = getThemeFromRGB(0, 80, 255);\nexport const themeBlueNoBG = getThemeFromRGB(0, 80, 255, false);\nexport const themeBlueTransparent = getThemeFromRGB(0, 80, 255, false, transparentOpts);\nexport const themeBlueLight = getThemeFromRGB(50, 100, 255);\nexport const themeBlueLightNoBG = getThemeFromRGB(50, 100, 255, false);\nexport const themeBlueDark = getThemeFromRGB(0, 50, 180);\nexport const themeBlueDarkNoBG = getThemeFromRGB(0, 50, 180, false);\n\n\n// GREEN\nexport const themeGreen = getThemeFromRGB(0, 255, 80);\nexport const themeGreenNoBG = getThemeFromRGB(0, 255, 80, false);\nexport const themeGreenTransparent = getThemeFromRGB(0, 255, 80, false, transparentOpts);\n\n\n// RED\nexport const themeRed = getThemeFromRGB(255, 80, 30);\nexport const themeRedNoBG = getThemeFromRGB(255, 80, 30, false);\n\n// OTHERS\nexport const themeGreyTransparent = getThemeFromRGB(200, 200, 200, false, transparentOpts);\nexport const themeDark = getThemeFromRGB(20, 20, 20);\n\nexport const severityTheme1 = getThemeFromRGB(255, 189, 0, false, transparentOpts);\nexport const severityTheme2 = getThemeFromRGB(255, 84, 0, false, transparentOpts);\nexport const severityTheme3 = getThemeFromRGB(158, 0, 89, false, transparentOpts);\n","import React from \"react\";\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport DefaultLineChart from \"../chart/DefaultLineChart\";\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport { themeMagenta, themeMagentaDark, themeMagentaLight } from \"../../config/themes\";\nimport { KEY } from \"../../model/EntriesAggregator\";\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\n\nconst GeneralCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  return chartGroupWrapper('Casos ativos', styles,\n    <DefaultLineChart\n      data={ptEntries.getAll(KEY.ACTIVE_PT)}\n      dateRange={dateRange}\n      label=\"Casos ativos em Portugal\"\n      theme={themeMagenta}\n    />,\n    <MultiLineChart\n      dataArray={[ptEntries.getAll(KEY.HOSPITALIZED_NURSERY), ptEntries.getAll(KEY.HOSPITALIZED_ICU)]}\n      dateRange={dateRange}\n      labels={[\"Internados em Enfermaria em Portugal\", \"Internados em UCI em Portugal\"]}\n      themes={[themeMagentaLight, themeMagentaDark]}\n    />,\n  );\n}\n\nexport default GeneralCharts;\n","import React from \"react\";\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport { smoothEntryValues, derivateEntryValues, getEntriesLineGenerator, convertDailyIncidencyToBiweeklyIncidency } from '../../utils/EntriesOps';\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport {\n  themeRed, themeBlue, themeBlueLightNoBG, themeDark, themeGreyTransparent, severityTheme1\n} from \"../../config/themes\";\nimport { KEY } from \"../../model/EntriesAggregator\";\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\n\nconst PortugalCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  const ptEntriesIncidence = ptEntries.getAll(KEY.INCIDENCE_PT);\n  const ptEntriesIncidence14 = convertDailyIncidencyToBiweeklyIncidency(\n    ptEntriesIncidence,\n    ptEntriesIncidence.map(e => e.x),\n  );\n\n  const deathEntries = derivateEntryValues(ptEntries.getAll(KEY.DEAD_PT));\n\n  const ptLineGenerator = getEntriesLineGenerator(ptEntriesIncidence);\n\n  return chartGroupWrapper('Evolução em Portugal', styles,\n\n    <MultiLineChart\n      dataArray={[\n        ptEntries.getAll(KEY.NEWCASES_PT), smoothEntryValues(ptEntries.getAll(KEY.NEWCASES_PT)),\n        \n      ]}\n      dateRange={dateRange}\n      labels={['Casos novos em Portugal', 'Tendência']}\n      themes={[themeRed, themeGreyTransparent]}\n    />,\n\n    <MultiLineChart\n      dataArray={[ptEntriesIncidence14]}\n      dateRange={dateRange}\n      labels={['Incidência em Portugal (a 14d p/ 100k hab.)']}\n      themes={[themeBlue]}\n    />,\n\n    <MultiLineChart\n      dataArray={[\n        ptEntries.getAll(KEY.TRANSMISSIBILITY_PT_CONTINENT), ptLineGenerator(1)\n      ]}\n      dateRange={dateRange}\n      labels={['R(t) em Portugal Continental', 'R(t)=1']}\n      themes={[themeBlueLightNoBG, severityTheme1]}\n      zeroBased={false}\n    />,\n\n    <MultiLineChart\n    dataArray={[deathEntries, smoothEntryValues(deathEntries)]}\n    dateRange={dateRange}\n    labels={['Mortes em Portugal', 'Tendência']}\n    themes={[themeDark, themeGreyTransparent]}\n  />,\n  );\n}\n\nexport default PortugalCharts;\n","import React from \"react\";\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport { derivateEntryValues, convertDailyCountToDailyIncidency } from '../../utils/EntriesOps';\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport {\n  themeYellowNoBG, themeCyanNoBG, themeMagentaNoBG, themeBlueNoBG, themeGreenNoBG\n} from \"../../config/themes\";\nimport { KEY } from \"../../model/EntriesAggregator\";\nimport {\n  POPULATION_NORTH, POPULATION_CENTER, POPULATION_LISBOA, POPULATION_ALENTEJO, POPULATION_ALGARVE\n} from '../../config/demographicValues';\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\n\nconst RegionCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  const northEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_NORTH));\n  const centerEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_CENTER));\n  const lisbonEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_LISBOA_TEJO));\n  const alentejoEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_ALENTEJO));\n  const algarveEntries = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_ALGARVE));\n  const northDailyIncidencyEntries = convertDailyCountToDailyIncidency(northEntries, POPULATION_NORTH);\n  const centerDailyIncidencyEntries = convertDailyCountToDailyIncidency(centerEntries, POPULATION_CENTER);\n  const lisbonDailyIncidencyEntries = convertDailyCountToDailyIncidency(lisbonEntries, POPULATION_LISBOA);\n  const alentejoDailyIncidencyEntries = convertDailyCountToDailyIncidency(alentejoEntries, POPULATION_ALENTEJO);\n  const algarveDailyIncidencyEntries = convertDailyCountToDailyIncidency(algarveEntries, POPULATION_ALGARVE);\n\n  return chartGroupWrapper('Evolução regional', styles,\n\n    // #### ZONAS DE PORTUGAL ####\n    <MultiLineChart\n    dataArray={[northEntries, centerEntries, lisbonEntries, alentejoEntries, algarveEntries]}\n      dateRange={dateRange}\n      labels={[\n        'Casos novos no Norte', 'Casos novos no Centro', 'Casos novos em Lisboa/V.Tejo',\n        'Casos novos no Alentejo', 'Casos novos no Algarve']}\n      themes={[themeYellowNoBG, themeMagentaNoBG, themeCyanNoBG, themeBlueNoBG, themeGreenNoBG]}\n    />,\n\n    // #### INCIDENCIA NAS ZONAS DE PORTUGAL ####\n    <MultiLineChart\n      dataArray={[\n        northDailyIncidencyEntries, centerDailyIncidencyEntries, lisbonDailyIncidencyEntries,\n        alentejoDailyIncidencyEntries, algarveDailyIncidencyEntries\n      ]}\n      dateRange={dateRange}\n      labels={[\n        'Incidência no Norte (a 1 dia p/ 100k hab.)', 'Incidência no Centro (a 1 dia p/ 100k hab.)',\n        'Incidência em Lisboa/V.Tejo (a 1 dia p/ 100k hab.)', 'Incidência no Alentejo (a 1 dia p/ 100k hab.)',\n        'Incidência no Algarve (a 1 dia p/ 100k hab.)']}\n      themes={[themeYellowNoBG, themeMagentaNoBG, themeCyanNoBG, themeBlueNoBG, themeGreenNoBG]}\n    />,\n  );\n}\n\nexport default RegionCharts;\n","import React from \"react\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport { themeYellow, themeBlueTransparent, severityTheme1, themeGreenTransparent } from \"../../config/themes\";\nimport { KEY, regionToKey } from \"../../model/EntriesAggregator\";\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\nimport { convertDailyCountToDailyIncidency, convertDailyIncidencyToBiweeklyIncidency, derivateEntryValues, getEntriesLineGenerator } from \"../../utils/EntriesOps\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport { regionToPopulation } from \"../../config/demographicValues\";\n\nconst TownCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const currTown = GeneralStore.useState(s => s.currentTown);\n  const regionMap = EntriesStore.useState(s => s.townRegionMap);\n  const currRegion = regionMap[currTown];\n  const allTownEntries = EntriesStore.useState(s => s.townEntries);\n  const currTownEntries = allTownEntries[currTown];\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const regionEntries = ptEntries.getAll(regionToKey(currRegion));\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  if(!currTownEntries)\n    return <CircularProgress/>;\n\n  const townEntriesIncidence14 = currTownEntries.getAll(KEY.TOWN_INCIDENCE_14);\n  const daysToConsider = townEntriesIncidence14.map(e => e.x);\n  const regionEntriesIncidence14 = convertDailyIncidencyToBiweeklyIncidency(\n    convertDailyCountToDailyIncidency(derivateEntryValues(regionEntries), regionToPopulation(currRegion)),\n    daysToConsider\n  );\n  const ptEntriesIncidence14 = convertDailyIncidencyToBiweeklyIncidency(\n    ptEntries.getAll(KEY.INCIDENCE_PT),\n    daysToConsider,\n  );\n  const townLineGenerator = getEntriesLineGenerator(townEntriesIncidence14);\n  const town = currTown; //currTown[0] + currTown.slice(1).toLowerCase();\n\n  return (\n    <div>\n      <Autocomplete\n        id=\"town-name-autocomplete\"\n        options={Object.keys(allTownEntries)}\n        value={currTown}\n        renderInput={(params) => <TextField {...params} label=\"Cidade\" variant=\"outlined\" />}\n        onChange={(_e, value) => value && GeneralStore.update(s => { s.currentTown = value })}\n      />\n      { chartGroupWrapper(`Evolução - ${town}`, styles,\n\n        <MultiLineChart\n          dataArray={[\n            townEntriesIncidence14,\n            regionEntriesIncidence14,\n            ptEntriesIncidence14,\n            townLineGenerator(120),\n          ]}\n          dateRange={dateRange}\n          labels={[\n            `Incidência - ${town} (a 14 dias p/ 100k hab.)`,\n            `Incidência - ${currRegion} (a 14 dias p/ 100k hab.)`,\n            'Incidência - Portugal (a 14 dias p/ 100k hab.)',\n            'Risco elevado',\n          ]}\n          themes={[themeYellow, themeGreenTransparent, themeBlueTransparent, severityTheme1]}\n        />,\n      )}\n    </div>\n  );\n}\n\nexport default TownCharts;\n","import React from \"react\";\nimport { chartGroupWrapper } from \"../../utils/chartUtils\";\nimport { derivateEntryValues, convertDailyCountToDailyIncidency, mergeEntryValuesBySum } from '../../utils/EntriesOps';\nimport MultiLineChart from \"../chart/MultiLineChart\";\nimport {\n  themeYellowNoBG, themeCyanNoBG, themeBlueNoBG, themeGreenNoBG, themeRedNoBG,\n  themeYellowDarkNoBG, themeMagentaDarkNoBG, themeMagentaLightNoBG\n} from \"../../config/themes\";\nimport { KEY } from \"../../model/EntriesAggregator\";\nimport {\n  POPULATION_0_9, POPULATION_10_19, POPULATION_20_29, POPULATION_30_39, POPULATION_40_49,\n  POPULATION_50_59, POPULATION_60_69, POPULATION_70_PLUS,\n} from '../../config/demographicValues';\nimport EntriesStore from \"../../store/EntriesStore\";\nimport GeneralStore from \"../../store/GeneralStore\";\n\nconst AgeCharts = () => {\n  const styles = GeneralStore.useState(s => s.styles);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const dateRange = EntriesStore.useState(s => s.dateRange);\n\n  const new0_9 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_0_9));\n  const new10_19 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_10_19));\n  const new20_29 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_20_29));\n  const new30_39 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_30_39));\n  const new40_49 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_40_49));\n  const new50_59 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_50_59));\n  const new60_69 = derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_60_69));\n  const new70_plus = mergeEntryValuesBySum(\n    derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_70_79)),\n    derivateEntryValues(ptEntries.getAll(KEY.CONFIRMED_80_PLUS)));\n\n  const newDailyIncidency0_9 = convertDailyCountToDailyIncidency(new0_9, POPULATION_0_9);\n  const newDailyIncidency10_19 = convertDailyCountToDailyIncidency(new10_19, POPULATION_10_19);\n  const newDailyIncidency20_29 = convertDailyCountToDailyIncidency(new20_29, POPULATION_20_29);\n  const newDailyIncidency30_39 = convertDailyCountToDailyIncidency(new30_39, POPULATION_30_39);\n  const newDailyIncidency40_49 = convertDailyCountToDailyIncidency(new40_49, POPULATION_40_49);\n  const newDailyIncidency50_59 = convertDailyCountToDailyIncidency(new50_59, POPULATION_50_59);\n  const newDailyIncidency60_69 = convertDailyCountToDailyIncidency(new60_69, POPULATION_60_69);\n  const newDailyIncidency70_plus = convertDailyCountToDailyIncidency(new70_plus, POPULATION_70_PLUS);\n\n  const dead0_9 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_0_9));\n  const dead10_19 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_10_19));\n  const dead20_29 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_20_29));\n  const dead30_39 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_30_39));\n  const dead40_49 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_40_49));\n  const dead50_59 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_50_59));\n  const dead60_69 = derivateEntryValues(ptEntries.getAll(KEY.DEAD_60_69));\n  const dead70_plus = mergeEntryValuesBySum(\n    derivateEntryValues(ptEntries.getAll(KEY.DEAD_70_79)),\n    derivateEntryValues(ptEntries.getAll(KEY.DEAD_80_PLUS)));\n \n  const themes = [\n    themeMagentaLightNoBG, themeMagentaDarkNoBG, themeBlueNoBG, themeCyanNoBG,\n    themeGreenNoBG, themeYellowNoBG, themeYellowDarkNoBG, themeRedNoBG,\n  ];\n\n\n  return chartGroupWrapper('Evolução por idade', styles,\n\n  // #### CASOS NOVOS POR IDADE ####\n  <MultiLineChart\n  dataArray={[new0_9, new10_19, new20_29, new30_39, new40_49, new50_59, new60_69, new70_plus]}\n    dateRange={dateRange}\n    labels={\n      ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70+']\n      .map(a => `Casos novos nos ${a} anos`)\n    }\n    themes={themes}\n  />,\n\n  // #### INCIDENCIA DE CASOS NOVOS POR IDADE ####\n  <MultiLineChart\n    dataArray={[\n      newDailyIncidency0_9, newDailyIncidency10_19, newDailyIncidency20_29, newDailyIncidency30_39,\n      newDailyIncidency40_49, newDailyIncidency50_59, newDailyIncidency60_69, newDailyIncidency70_plus]}\n    dateRange={dateRange}\n    labels={\n      ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70+']\n      .map(a => `Incidência nos ${a} anos (p/ 100k pax na faixa)`)\n    }\n    themes={themes}\n  />,\n\n  // #### CASOS NOVOS POR IDADE ####\n  <MultiLineChart\n  dataArray={[dead0_9, dead10_19, dead20_29, dead30_39, dead40_49, dead50_59, dead60_69, dead70_plus]}\n    dateRange={dateRange}\n    labels={\n      ['0-9', '10-19', '20-29', '30-39', '40-49', '50-59', '60-69', '70+']\n      .map(a => `Mortes nos ${a} anos`)\n    }\n    themes={themes}\n  />,\n  );\n}\n\nexport default AgeCharts;\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CircularProgress } from '@material-ui/core';\nimport EntriesAggregator, { KEY } from './model/EntriesAggregator';\nimport { getTownData, getPortugalData, getVaccineData } from './utils/fetchData';\nimport TextCard from './component/card/TextCard';\nimport MyHeader from './component/app/MyHeader';\nimport MyFooter from './component/app/MyFooter';\nimport SummaryCards from './component/app/SummaryCards';\nimport GeneralCharts from './component/app/GeneralCharts';\nimport NewCasesCharts from './component/app/PortugalCharts';\nimport RegionCharts from './component/app/RegionCharts';\nimport TownCharts from './component/app/TownCharts';\nimport EntriesStore from './store/EntriesStore';\nimport GeneralStore from './store/GeneralStore';\nimport DateEntry from './model/DateEntry';\nimport AgeCharts from './component/app/AgeCharts';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    'backgroundColor': '#f5f5f5',\n    flexGrow: 1,\n    'align-items': 'center',\n    'justify-content': 'center',\n    padding: 15,\n    paddingRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '50vh',\n    width: '90vw',\n  },\n  progress: {\n    float: 'none',\n    margin: '0 auto',\n  },\n  appBar: {\n    marginBottom: 20,\n    backgroundColor: '#e0e0e0',\n  },\n  formControl: {\n    margin: 10,\n    minWidth: 80,\n  },\n}));\n\nfunction getTabContent(tab: number) {\n  switch (tab) {\n    case 0:\n      return (\n        <div>\n          <GeneralCharts />\n          <br />\n          <TownCharts />\n          <br />\n          <NewCasesCharts />\n        </div>\n      );\n    case 1:\n      return (\n        <div>\n          <RegionCharts />\n          <br />\n          <AgeCharts />\n        </div>\n      );\n    case 2:\n      return <SummaryCards />;\n    default:\n      return (<p>Bug? ¯\\_(ツ)_/¯</p>);\n  }\n}\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  // ========== DEFINITIONS ==========\n  const styles = useStyles();\n  GeneralStore.update(s => { s.styles = styles });\n\n  const [isFetching, setIsFetching]: [boolean, Function] = useState(true);\n  const [renderTime, setRenderTime]: [number, Function] = useState(0);\n  const currTown: string = GeneralStore.useState(s => s.currentTown);\n  const ptEntries = EntriesStore.useState(s => s.portugalEntries);\n  const townEntries = EntriesStore.useState(s => s.townEntries[currTown]);\n  let lastTownUpdate: string = \"\";\n  let lastPtUpdate: string = \"\";\n  const tab: number = GeneralStore.useState(s => s.tab);\n  let tabContent = getTabContent(tab);\n  const town = currTown[0] + currTown.slice(1).toLowerCase();\n\n  const isPtDataReady = ptEntries.getAll(KEY.CONFIRMED_PT).length > 0;\n\n  // ========== LOGIC ==========\n  useEffect(() => {\n    getPortugalData((e: EntriesAggregator<string, DateEntry>) => EntriesStore.update(s => { s.portugalEntries = e }));\n    getVaccineData((e: EntriesAggregator<string, DateEntry>) => EntriesStore.update(s => { s.vaccineEntries = e }));\n    getTownData(\n      currTown,\n      (\n        entries: { [key: string]: EntriesAggregator<string, DateEntry> },\n        regionMap: { [key: string]: string }) =>\n        EntriesStore.update(s => {\n          s.townRegionMap = regionMap;\n          s.townEntries = entries;\n        })\n    );\n    // eslint-disable-next-line\n  }, []);\n\n  if (!isFetching) {\n    lastTownUpdate = townEntries?.getLast(KEY.TOWN_INCIDENCE_14).x;\n    lastPtUpdate = ptEntries.getLast(KEY.CONFIRMED_PT).x;\n    if (!renderTime) setRenderTime(Math.round(performance.now()));\n  }\n\n  if (isFetching && isPtDataReady)\n    setIsFetching(false);\n\n\n  // ========== RENDER ==========\n  return (\n    <div className={styles.root}>\n      { isFetching\n        ? <CircularProgress className={styles.progress} />\n        : <div>\n          <MyHeader />\n          <TextCard>\n            A última atualização destes dados ocorreu nas seguintes datas: {`Portugal/Norte => ${lastPtUpdate}, ${town} => ${lastTownUpdate || ''}`}. Esta página carregou em {renderTime}ms.\n              </TextCard>\n\n          <br />\n          {tabContent}\n          <br />\n\n          <MyFooter />\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}