{"version":3,"sources":["model/PortugalEntries.tsx","model/Entry.tsx","utils/fetchData.tsx","utils/chartUtils.tsx","chart/templates/DefaultLineChart.js","config/themes.js","chart/NewCasesCharts.js","chart/templates/MultiLineChart.js","chart/GeneralCharts.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["PortugalEntries","confirmedPt","confirmedNorth","newConfirmedPt","ptActiveEntries","hospitalizedEntries","icuEntries","_confirmedPt","_confirmedNorth","_newConfirmedPt","_activePt","_hospitalized","_icu","this","Entry","date","count","_dateStr","_date","_count","dateStr","parts","split","Date","Number","strToDate","parseInt","isNaN","_getDataFromSource","sourceFile","url","headers","Headers","Accept","console","log","fetch","method","getTownData","town","callback","then","response","status","text","responseData","entries","stream","Readable","push","pipe","Csv","on","data","catch","err","error","getPortugalData","ptConfirmedEntries","northConfirmedEntries","ptNewConfirmedEntries","hospitalizedIcuEntries","confirmados","confirmados_arsnorte","confirmados_novos","ativos","internados","internados_uci","getEntriesSince","dateRange","dateLimit","setDate","getDate","filter","e","derivateEntryValues","prevEntry","newCasesEntries","i","length","currEntry","getChartData","label","chosenTheme","datasets","categoryPercentage","barPercentage","lineTension","borderWidth","pointBackgroundColor","pointHoverBorderColor","pointBorderWidth","pointHoverRadius","map","entry","labels","getMultipleChartData","entriesArray","chosenThemes","Array","from","keys","getChartOptions","beginAtZero","suggestedMin","suggestedMax","maintainAspectRatio","scales","yAxes","ticks","key","chartWrapper","chartElement","classes","Grid","item","xs","className","chartContainer","chartGroupWrapper","title","components","Typography","variant","style","textAlign","gutterBottom","container","spacing","component","DefaultLineChart","theme","zeroBased","lastNEntries","min","Math","max","margin","round","options","defaultProps","themeMagenta","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","themeMagentaLight","themeMagentaDark","themeYellow","NewCasesCharts","trofaEntries","northEntries","ptEntries","MultiLineChart","dataArray","themes","lastNEntriesArray","d","lastEntriesFlat","flatMap","eArr","offset","GeneralCharts","activePt","hospitalized","hospitalizedIcu","useStyles","makeStyles","root","flexGrow","display","padding","paddingRight","position","height","width","progress","float","appBar","maxWidth","marginBottom","formControl","App","useState","isFetching","setIsFetching","setDateRange","trofaNewEntries","setTrofaEntries","setPtEntries","lastTownUpdate","lastPtUpdate","northNewEntries","useEffect","CircularProgress","AppBar","FormControl","InputLabel","id","Select","labelId","value","onChange","target","MenuItem","Card","CardContent","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4YAEqBA,E,WAQnB,aAC+F,IADnFC,EACkF,uDAD3D,GAAIC,EACuD,uDAD7B,GAAIC,EACyB,uDADC,GAC7FC,EAA4F,uDAAjE,GAAIC,EAA6D,uDAA9B,GAAIC,EAA0B,uDAAJ,GAAI,yBAR9FC,kBAQ8F,OAP9FC,qBAO8F,OAN9FC,qBAM8F,OAL9FC,eAK8F,OAJ9FC,mBAI8F,OAH9FC,UAG8F,EAC5FC,KAAKN,aAAeN,EACpBY,KAAKL,gBAAkBN,EACvBW,KAAKJ,gBAAkBN,EACvBU,KAAKH,UAAYN,EACjBS,KAAKF,cAAgBN,EACrBQ,KAAKD,KAAON,E,wDAIZ,OAAOO,KAAKN,e,qCAIZ,OAAOM,KAAKL,kB,qCAIZ,OAAOK,KAAKJ,kB,+BAIZ,OAAOI,KAAKH,Y,mCAIZ,OAAOG,KAAKF,gB,sCAIZ,OAAOE,KAAKD,S,kCCpCKE,E,WAKnB,WAAYC,EAAcC,GAAuB,yBAJjDC,cAIgD,OAHhDC,WAGgD,OAFhDC,YAEgD,EAC9CN,KAAKI,SAAWF,EAChBF,KAAKK,MAZT,SAAmBE,GACjB,IAAMC,EAAQD,EAAQE,MAAM,KAC5B,OAAO,IAAIC,KAAKC,OAAOH,EAAM,IAAKG,OAAOH,EAAM,IAAKG,OAAOH,EAAM,KAUlDI,CAAUV,GAEvBF,KAAKM,OAA0B,kBAAVH,EAAqBA,EAAQU,SAASV,GAExDW,MAAMd,KAAKM,UACZN,KAAKM,OAAS,G,oDAIhB,OAAON,KAAKI,W,2BAIZ,OAAOJ,KAAKK,Q,4BAIZ,OAAOL,KAAKM,W,KCxBhB,SAASS,EAAmBC,GAC1B,IAAMC,EAAM,mEAAmED,EACzEE,EAAmB,IAAIC,QAAQ,CAInCC,OAAQ,mCAIV,OADAC,QAAQC,IAAI,iCAAiCN,GACtCO,MAAMN,EAAK,CAAEO,OAAQ,MAAON,YAG9B,SAASO,EAAYC,EAAcC,GACxCZ,EAAmB,iCAChBa,MAAK,SAACC,GACL,GAAIA,GAAgC,MAApBA,EAASC,OACvB,OAAOD,EAASE,UAEnBH,MAAK,SAAAI,GACJ,IAAMC,EAAmB,GACnBC,EAAS,IAAIC,WACnBD,EAAOE,KAAKJ,GACZE,EAAOE,KAAK,MACZF,EACGG,KAAKC,OACLC,GAAG,QAAQ,SAAAC,GAAI,OAAIP,EAAQG,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKd,QAC1Da,GAAG,OAAO,kBAAMZ,EAASM,SAE7BQ,OAAM,SAAAC,GAAG,OAAIrB,QAAQsB,MAAMD,MAGzB,SAASE,EAAgBjB,GAC9BZ,EAAmB,YAChBa,MAAK,SAACC,GACL,GAAIA,GAAgC,MAApBA,EAASC,OACvB,OAAOD,EAASE,UAEnBH,MAAK,SAAAI,GACJ,IAAMa,EAA8B,GAC9BC,EAAiC,GACjCC,EAAiC,GACjCxD,EAA2B,GAC3BC,EAA+B,GAC/BwD,EAAkC,GAClCd,EAAS,IAAIC,WACnBD,EAAOE,KAAKJ,GACZE,EAAOE,KAAK,MACZF,EACGG,KAAKC,OACLC,GAAG,QAAQ,SAAAC,GACVK,EAAmBT,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKS,cAClDH,EAAsBV,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKU,uBACrDH,EAAsBX,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKW,oBACrD5D,EAAgB6C,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKY,SAC/C5D,EAAoB4C,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKa,aACnDL,EAAuBZ,KAAK,IAAInC,EAAMuC,EAAKA,KAAMA,EAAKc,oBAEvDf,GAAG,OAAO,kBAAMZ,EAAS,IAAIxC,EAAgB0D,EAAoBC,EAAuBC,EAAuBxD,EAAiBC,EAAqBwD,UAEzJP,OAAM,SAAAC,GAAG,OAAIrB,QAAQsB,MAAMD,MAGjB,I,iBChER,SAASa,EAAgBC,EAAmBvB,GACjD,IAAMwB,EAAY,IAAI/C,KAGtB,OAFA+C,EAAUC,QAAQD,EAAUE,UAAYH,GAEjCvB,EAAQ2B,QAAO,SAAAC,GAAC,OAAIA,EAAE3D,MAAQuD,KAGhC,SAASK,EAAoB7B,GAIlC,IAHA,IAAI8B,EAAY9B,EAAQ,GAClB+B,EAAkB,CAAC,IAAI/D,EAAM8D,EAAUxD,QAAS,IAE9C0D,EAAE,EAAGA,EAAEhC,EAAQiC,OAAQD,IAAK,CAClC,IAAME,EAAYlC,EAAQgC,GAC1BD,EAAgB5B,KAAK,IAAInC,EAAMkE,EAAU5D,QAAS4D,EAAUhE,MAAQ4D,EAAU5D,QAC9E4D,EAAYI,EAGd,OAAOH,EAGF,SAASI,EAAanC,EAAkBoC,EAAeC,GAiB5D,MAhBe,CACbC,SAAU,CAAC,aACTF,QACAG,mBAAoB,EACpBC,cAAe,IACfC,YAAa,GACbC,YAAa,EACbC,qBAAsB,OACtBC,sBAAuB,sBACvBC,iBAAkB,EAClBC,iBAAkB,EAClBvC,KAAMP,EAAQ+C,KAAI,SAAAC,GAAK,OAAIA,EAAM9E,UAC9BmE,IAELY,OAAQjD,EAAQ+C,KAAI,SAAAC,GAAK,OAAIA,EAAM1E,YAKhC,SAAS4E,EAAqBC,EAAyBF,EAAkBG,GAiB9E,MAhBe,CACbd,SAAUe,MAAMC,KAAKD,MAAMF,EAAalB,QAAQsB,QAAQR,KAAI,SAAAf,GAAC,oBAC3DI,MAAOa,EAAOjB,GACdO,mBAAoB,EACpBC,cAAe,IACfC,YAAa,GACbC,YAAa,EACbC,qBAAsB,OACtBC,sBAAuB,sBACvBC,iBAAkB,EAClBC,iBAAkB,EAClBvC,KAAM4C,EAAanB,GAAGe,KAAI,SAAAC,GAAK,OAAIA,EAAM9E,UACtCkF,EAAapB,OAElBiB,OAAQE,EAAa,GAAGJ,KAAI,SAAAC,GAAK,OAAIA,EAAM1E,YAKxC,SAASkF,IAA0E,IAA1DC,EAAyD,wDAAtCC,EAAsC,uDAAzB,KAAMC,EAAmB,uDAAN,KACjF,MAAO,CACLC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CAAC,CACNC,MAAO,CACLN,cACAC,eACAC,oBAOV,IAAIK,EAAI,EACD,SAASC,EAAaC,EAA2BC,GACtD,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIN,IAAKA,KACtB,yBAAKO,UAAWJ,EAAQK,gBACrBN,IAMF,IAAMO,EAAoB,SAACC,EAAeP,GAAhB,2BAAiCQ,EAAjC,iCAAiCA,EAAjC,yBAC/B,6BACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,MAAO,CAAEC,UAAW,UAAYC,cAAY,GAClEN,GAEH,kBAACN,EAAA,EAAD,CAAMa,WAAS,EAACC,QAAS,GACtBP,EAAW5B,KAAI,SAAAoC,GAAS,OAAIlB,EAAakB,EAAWhB,S,gBC1FrDiB,EAAmB,SAAC,GAAkD,IAAhD7E,EAA+C,EAA/CA,KAAMgB,EAAyC,EAAzCA,UAAWa,EAA8B,EAA9BA,MAAOiD,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACnDC,EAAejE,EAAgBC,EAAWhB,GAC1CiF,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQF,EAAaxC,KAAI,SAAAnB,GAAC,OAAEA,EAAE1D,WACxCwH,EAAMD,KAAKC,IAAL,MAAAD,KAAI,YAAQF,EAAaxC,KAAI,SAAAnB,GAAC,OAAEA,EAAE1D,WACxCyH,EAASF,KAAKC,KAAKA,EAAMF,GAAK,GAAIF,EAAY,EAAI,GAElD3B,EAAe8B,KAAKG,MAAMF,EAAMC,GAElCjC,EAAe+B,KAAKG,MAAMJ,EAAMG,GAIpC,OAHGL,IAAW5B,EAAe+B,KAAKC,IAAIhC,EAAc,IAIlD,kBAAC,IAAD,CACEnD,KAAM4B,EAAaoD,EAAcnD,EAAOiD,GACxCQ,QAASrC,EAAgB8B,EAAW5B,EAAcC,MAaxDyB,EAAiBU,aAAe,CAC9BR,WAAW,EACX/D,UAAW,GAGE6D,QChCFW,EAAe,CAC1BC,gBAAiB,uBACjBC,YAAa,qBACbC,iBAAkB,qBAClBC,0BAA2B,sBAGhBC,EAAoB,CAC/BJ,gBAAiB,0BACjBC,YAAa,wBACbC,iBAAkB,wBAClBC,0BAA2B,yBAGhBE,EAAmB,CAC9BL,gBAAiB,yBACjBC,YAAa,uBACbC,iBAAkB,wBAClBC,0BAA2B,wBAGhBG,EAAc,CACzBN,gBAAiB,uBACjBC,YAAa,qBACbC,iBAAkB,qBAClBC,0BAA2B,sBCOdI,EA/BQ,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,aAAcC,EAAkD,EAAlDA,aAAcC,EAAoC,EAApCA,UAAWnF,EAAyB,EAAzBA,UAAW4C,EAAc,EAAdA,QAC1E,OAAOM,EAAkB,cAAeN,EACtC,kBAAC,EAAD,CACE5D,KAAMiG,EACNjF,UAAWA,EACXa,MAAM,uCACNiD,MAAOiB,IAET,kBAAC,EAAD,CACE/F,KAAMkG,EACNlF,UAAWA,EACXa,MAAM,uBACNiD,MAAOiB,IAET,kBAAC,EAAD,CACE/F,KAAMmG,EAAUrJ,eAChBkE,UAAWA,EACXa,MAAM,0BACNiD,MAAOiB,MCpBPK,EAAiB,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,UAAWrF,EAA2C,EAA3CA,UAAW0B,EAAgC,EAAhCA,OAAQ4D,EAAwB,EAAxBA,OAAQvB,EAAgB,EAAhBA,UACxDwB,EAAoBF,EAAU7D,KAAI,SAAAgE,GAAC,OAAEzF,EAAgBC,EAAWwF,MAChEC,EAAkBF,EAAkBG,SAAQ,SAAAC,GAAI,OAAEA,EAAKnE,KAAI,SAAAnB,GAAC,OAAEA,EAAE1D,YAChEsH,EAAMC,KAAKD,IAAL,MAAAC,KAAI,YAAQuB,IAClBtB,EAAMD,KAAKC,IAAL,MAAAD,KAAI,YAAQuB,IAClBG,EAAS1B,KAAKC,KAAKA,EAAMF,GAAK,GAAIF,EAAY,EAAI,GAElD3B,EAAe8B,KAAKG,MAAMF,EAAMyB,GAElCzD,EAAe+B,KAAKG,MAAMJ,EAAM2B,GAKpC,OAJG7B,IAAW5B,EAAe+B,KAAKC,IAAIhC,EAAc,IACpDtE,QAAQC,IAAI2H,GACZ5H,QAAQC,IAAR,UAAeqE,EAAf,aAAgCC,IAE7BiD,EAAU3E,SAAWgB,EAAOhB,QAAUgB,EAAOhB,SAAW4E,EAAO5E,QAChE7C,QAAQsB,MAAM,8CACP,kBAAC,IAAD,CAAMmF,QAASrC,GAAgB,EAAOE,EAAcC,MAG3D,kBAAC,IAAD,CACEpD,KAAM2C,EAAqB4D,EAAmB7D,EAAQ4D,GACtDhB,QAASrC,EAAgB8B,EAAW5B,EAAcC,MAaxDgD,EAAeb,aAAe,CAC5BR,WAAW,EACX/D,UAAW,GAGEoF,QCZAS,EAzBO,SAAC,GAAuC,IAArCV,EAAoC,EAApCA,UAAWnF,EAAyB,EAAzBA,UAAW4C,EAAc,EAAdA,QAC7C,OAAOM,EAAkB,eAAgBN,EACvC,kBAAC,EAAD,CACE5D,KAAMmG,EAAUW,SAChB9F,UAAWA,EACXa,MAAM,2BACNiD,MAAOU,EACPT,WAAW,IAEb,kBAAC,EAAD,CACEsB,UAAW,CAACF,EAAUY,aAAcZ,EAAUa,iBAC9ChG,UAAWA,EACX0B,OAAQ,CAAC,yBAA0B,iCACnC4D,OAAQ,CAACT,EAAmBC,GAC5Bf,WAAW,MCVXkC,EAAYC,aAAW,iBAAO,CAClCC,KAAM,CACJ,gBAAmB,UACnBC,SAAU,EACVC,QAAS,OACT,cAAe,SACf,kBAAmB,SACnBC,QAAS,GACTC,aAAc,IAEhBtD,eAAgB,CACduD,SAAU,WACVpC,OAAQ,OACRqC,OAAQ,OACRC,MAAO,QAETC,SAAU,CACRC,MAAO,OACPxC,OAAQ,UAEVyC,OAAQ,CACNC,SAAU,IACVC,aAAc,GACdtC,gBAAiB,WAEnBuC,YAAa,CACX5C,OAAQ,QAsFG6C,EAjFgB,WAC7B,IAAMrE,EAAUqD,IADgC,EAESiB,oBAAS,GAFlB,mBAEzCC,EAFyC,KAE7BC,EAF6B,OAGMF,mBAAS,IAHf,mBAGzClH,EAHyC,KAG9BqH,EAH8B,OAKgBH,mBAAS,IALzB,mBAKzCI,EALyC,KAKxBC,EALwB,OAMeL,mBAAS,IAAIvL,GAN5B,mBAMzCwJ,EANyC,KAM9BqC,EAN8B,KAQ5CC,EAAyB,GACzBC,EAAuB,GACvBC,EAA2B,GAiB/B,OAdIR,IACFM,EAAiBH,EAAgBA,EAAgB5G,OAAO,GAAG3D,QAC3D2K,EAAevC,EAAUvJ,YAAYuJ,EAAUvJ,YAAY8E,OAAQ,GAAG3D,QACtE4K,EAAkBrH,EAAoB6E,EAAUtJ,iBAGlD+L,qBAAU,WACR3J,EAAY,QAASsJ,GACrBnI,EAAgBoI,KACf,IAEAL,GAAcG,EAAgB5G,OAAS,GAAKyE,EAAUvJ,YAAY8E,OAAS,GAC5E0G,GAAc,GAGd,yBAAKpE,UAAWJ,EAAQuD,MACtBgB,EACE,kBAACU,EAAA,EAAD,CAAkB7E,UAAWJ,EAAQ+D,WACrC,6BACA,kBAACmB,EAAA,EAAD,CAAQtB,SAAS,SAASxD,UAAWJ,EAAQiE,QAC7C,kBAACkB,EAAA,EAAD,CAAa/E,UAAWJ,EAAQoE,aAChC,kBAACgB,EAAA,EAAD,CAAYC,GAAG,cAAf,SACA,kBAACC,EAAA,EAAD,CACEC,QAAQ,aACRF,GAAG,cACHG,MAAOpI,EACPqI,SAAU,SAAAhI,GAAC,OAAIgH,EAAahH,EAAEiI,OAAOF,SAErC,kBAACG,EAAA,EAAD,CAAUH,MAAO,IAAjB,WACA,kBAACG,EAAA,EAAD,CAAUH,MAAO,IAAjB,WACA,kBAACG,EAAA,EAAD,CAAUH,MAAO,QAAjB,mBAKF,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACpF,EAAA,EAAD,CAAYC,QAAQ,QAAQM,UAAU,KAAtC,uGACuF8D,EADvF,sBACiHD,GADjH,IAEE,gCAMN,6BACA,kBAAC,EAAD,CAAetC,UAAWA,EAAWnF,UAAWA,EAAW4C,QAASA,IACpE,6BACA,kBAAC,EAAD,CAAgBqC,aAAcqC,EAAiBtH,UAAWA,EAAWkF,aAAcyC,EAAiBxC,UAAWA,EAAWvC,QAASA,IACnI,6BAEA,kBAAC4F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACpF,EAAA,EAAD,CAAYC,QAAQ,QAAQM,UAAU,KAAtC,oEAC0D,uBAAG8E,KAAK,6CAAR,0BAD1D,IAEE,6BAFF,uDAGmD,uBAAGA,KAAK,mDAAR,QAHnD,IAIE,mCCrGMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlL,MAAK,SAAAmL,GACjCA,EAAaC,kB","file":"static/js/main.2b8f64e1.chunk.js","sourcesContent":["import Entry from \"./Entry\";\n\nexport default class PortugalEntries {\n  _confirmedPt: Entry[];\n  _confirmedNorth: Entry[];\n  _newConfirmedPt: Entry[];\n  _activePt: Entry[];\n  _hospitalized: Entry[];\n  _icu: Entry[];\n\n  constructor(confirmedPt: Entry[] = [], confirmedNorth: Entry[] = [], newConfirmedPt: Entry[] = [],\n    ptActiveEntries: Entry[] = [], hospitalizedEntries: Entry[] = [], icuEntries: Entry[] = []) {\n    this._confirmedPt = confirmedPt;\n    this._confirmedNorth = confirmedNorth;\n    this._newConfirmedPt = newConfirmedPt;\n    this._activePt = ptActiveEntries;\n    this._hospitalized = hospitalizedEntries;\n    this._icu = icuEntries;\n  }\n\n  get confirmedPt(): Entry[] {\n    return this._confirmedPt;\n  }\n\n  get confirmedNorth(): Entry[] {\n    return this._confirmedNorth;\n  }\n\n  get newConfirmedPt(): Entry[] {\n    return this._newConfirmedPt;\n  }\n\n  get activePt(): Entry[] {\n    return this._activePt;\n  }\n\n  get hospitalized(): Entry[] {\n    return this._hospitalized;\n  }\n\n  get hospitalizedIcu(): Entry[] {\n    return this._icu;\n  }\n}\n","function strToDate(dateStr: string) {\n  const parts = dateStr.split('-');\n  return new Date(Number(parts[2]), Number(parts[1]), Number(parts[0]));\n}\n\nexport default class Entry {\n  _dateStr: string;\n  _date: Date;\n  _count: number;\n\n  constructor(date: string, count: string|number) {\n    this._dateStr = date;\n    this._date = strToDate(date);\n\n    this._count = typeof count === 'number' ? count : parseInt(count);\n\n    if(isNaN(this._count))\n      this._count = 0;\n  }\n\n  get dateStr(): string {\n    return this._dateStr;\n  }\n\n  get date(): Date {\n    return this._date;\n  }\n\n  get count(): number {\n    return this._count;\n  }\n}","import { Readable } from 'stream';\nimport Csv from 'csv-parser';\nimport Entry from '../model/Entry';\nimport PortugalEntries from '../model/PortugalEntries';\n\nfunction _getDataFromSource(sourceFile: string): Promise<Response> {\n  const url = 'https://raw.githubusercontent.com/dssg-pt/covid19pt-data/master/'+sourceFile;\n  const headers: Headers = new Headers({\n    //'Content-Type': 'application/x-www-form-urlencoded',\n    //'Origin': 'https://github.com',\n    //'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n    Accept: 'application/vnd.github.v3+json',\n    // 'Access-Control-Allow-Origin': '*',\n  });\n  console.log('[_getDataFromSource] Fetching '+sourceFile);\n  return fetch(url, { method: 'GET', headers });\n}\n\nexport function getTownData(town: string, callback: Function) {\n  _getDataFromSource('data_concelhos_incidencia.csv')\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const entries: Entry[] = [];\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => entries.push(new Entry(data.data, data[town])))\n        .on('end', () => callback(entries));\n    })\n    .catch(err => console.error(err));\n}\n\nexport function getPortugalData(callback: Function) {\n  _getDataFromSource('data.csv')\n    .then((response: Response) => {\n      if (response && response.status === 200)\n        return response.text();\n    })\n    .then(responseData => {\n      const ptConfirmedEntries: Entry[] = [];\n      const northConfirmedEntries: Entry[] = [];\n      const ptNewConfirmedEntries: Entry[] = [];\n      const ptActiveEntries: Entry[] = [];\n      const hospitalizedEntries: Entry[] = [];\n      const hospitalizedIcuEntries: Entry[] = [];\n      const stream = new Readable();\n      stream.push(responseData);\n      stream.push(null);\n      stream\n        .pipe(Csv())\n        .on('data', data => {\n          ptConfirmedEntries.push(new Entry(data.data, data.confirmados));\n          northConfirmedEntries.push(new Entry(data.data, data.confirmados_arsnorte));\n          ptNewConfirmedEntries.push(new Entry(data.data, data.confirmados_novos));\n          ptActiveEntries.push(new Entry(data.data, data.ativos));\n          hospitalizedEntries.push(new Entry(data.data, data.internados));\n          hospitalizedIcuEntries.push(new Entry(data.data, data.internados_uci));\n        })\n        .on('end', () => callback(new PortugalEntries(ptConfirmedEntries, northConfirmedEntries, ptNewConfirmedEntries, ptActiveEntries, hospitalizedEntries, hospitalizedIcuEntries)));\n    })\n    .catch(err => console.error(err));\n}\n\nexport default {\n  getTownData,\n  getPortugalData,\n}\n","import Entry from \"../model/Entry\";\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\n\nexport function getEntriesSince(dateRange: number, entries: Entry[]) {\n  const dateLimit = new Date();\n  dateLimit.setDate(dateLimit.getDate() - dateRange);\n\n  return entries.filter(e => e.date >= dateLimit);\n}\n\nexport function derivateEntryValues(entries: Entry[]): Entry[] {\n  let prevEntry = entries[0];\n  const newCasesEntries = [new Entry(prevEntry.dateStr, 0)];\n\n  for(let i=1; i<entries.length; i++) {\n    const currEntry = entries[i];\n    newCasesEntries.push(new Entry(currEntry.dateStr, currEntry.count - prevEntry.count));\n    prevEntry = currEntry;\n  }\n\n  return newCasesEntries;\n}\n\nexport function getChartData(entries: Entry[], label: string, chosenTheme: object) {\n  const result = {\n    datasets: [{\n      label,\n      categoryPercentage: 1.0,\n      barPercentage: 0.95,\n      lineTension: 0.1,\n      borderWidth: 2,\n      pointBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      data: entries.map(entry => entry.count),\n      ...chosenTheme,\n    }],\n    labels: entries.map(entry => entry.dateStr),\n  };\n  return result;\n}\n\nexport function getMultipleChartData(entriesArray: Entry[][], labels: string[], chosenThemes: object[]) {\n  const result = {\n    datasets: Array.from(Array(entriesArray.length).keys()).map(i => ({\n      label: labels[i],\n      categoryPercentage: 1.0,\n      barPercentage: 0.95,\n      lineTension: 0.1,\n      borderWidth: 2,\n      pointBackgroundColor: '#fff',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      data: entriesArray[i].map(entry => entry.count),\n      ...chosenThemes[i],\n    })),\n    labels: entriesArray[0].map(entry => entry.dateStr),\n  }\n  return result;\n}\n\nexport function getChartOptions(beginAtZero=false, suggestedMin=null, suggestedMax=null) {\n  return {\n    maintainAspectRatio: false,\n    scales: {\n      yAxes: [{\n        ticks: {\n          beginAtZero,\n          suggestedMin,\n          suggestedMax,\n        }\n      }]\n    },\n  }\n}\n\nlet key=0;\nexport function chartWrapper(chartElement: JSX.Element, classes: any): JSX.Element {\n  return (\n    <Grid item xs={12} key={key++}>\n      <div className={classes.chartContainer}>\n        {chartElement}\n      </div>\n    </Grid>\n  );\n}\n\nexport const chartGroupWrapper = (title: String, classes: any, ...components: JSX.Element[]) => (\n  <div>\n    <Typography variant=\"h3\" style={{ textAlign: 'center' }} gutterBottom>\n      {title}\n    </Typography>\n    <Grid container spacing={3}>\n      {components.map(component => chartWrapper(component, classes))}\n    </Grid>\n  </div>\n);\n\nexport default {\n  getEntriesSince,\n  processCaseCount2NewCases: derivateEntryValues,\n  getChartData,\n  getChartOptions,\n  chartWrapper,\n  chartGroupWrapper,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getEntriesSince, getChartOptions, getChartData } from '../../utils/chartUtils';\n\nconst DefaultLineChart = ({ data, dateRange, label, theme, zeroBased }) => {\n  const lastNEntries = getEntriesSince(dateRange, data);\n  const min = Math.min(...lastNEntries.map(e=>e.count));\n  const max = Math.max(...lastNEntries.map(e=>e.count));\n  const margin = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + margin);\n\n  let suggestedMin = Math.round(min - margin);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n\n  \n  return (\n    <Line\n      data={getChartData(lastNEntries, label, theme)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nDefaultLineChart.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  label: PropTypes.string.isRequired,\n  theme: PropTypes.object.isRequired,\n  zeroBased: PropTypes.bool,\n};\n\nDefaultLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default DefaultLineChart;\n","export const themeCyan = {\n  backgroundColor: 'rgba(75,192,192,0.4)',\n  borderColor: 'rgba(75,192,192,1)',\n  pointBorderColor: 'rgba(75,192,192,1)',\n  pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n}\n\nexport const themeMagenta = {\n  backgroundColor: 'rgba(192,75,192,0.4)',\n  borderColor: 'rgba(192,75,192,1)',\n  pointBorderColor: 'rgba(192,75,192,1)',\n  pointHoverBackgroundColor: 'rgba(192,75,192,1)',\n}\n\nexport const themeMagentaLight = {\n  backgroundColor: 'rgba(217, 128, 217,0.4)',\n  borderColor: 'rgba(217, 128, 217,1)',\n  pointBorderColor: 'rgba(217, 128, 217,1)',\n  pointHoverBackgroundColor: 'rgba(217, 128, 217,1)',\n}\n\nexport const themeMagentaDark = {\n  backgroundColor: 'rgba(140, 83, 140,0.4)',\n  borderColor: 'rgba(140, 83, 140,1)',\n  pointBorderColor: 'rgba(1140, 83, 140,1)',\n  pointHoverBackgroundColor: 'rgba(140, 83, 140,1)',\n}\n\nexport const themeYellow = {\n  backgroundColor: 'rgba(192,192,75,0.4)',\n  borderColor: 'rgba(192,192,75,1)',\n  pointBorderColor: 'rgba(192,192,75,1)',\n  pointHoverBackgroundColor: 'rgba(192,192,75,1)',\n}\n\nexport default {\n  themeCyan,\n  themeMagenta,\n  themeYellow,\n}\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { chartGroupWrapper } from \"../utils/chartUtils\";\nimport DefaultLineChart from \"./templates/DefaultLineChart\";\nimport { themeYellow } from \"../config/themes\";\nimport Entry from \"../model/Entry\";\nimport PortugalEntries from \"../model/PortugalEntries\";\n\nconst NewCasesCharts = ({ trofaEntries, northEntries, ptEntries, dateRange, classes }) => {\n  return chartGroupWrapper('Casos novos', classes,\n    <DefaultLineChart\n      data={trofaEntries}\n      dateRange={dateRange}\n      label=\"Casos novos na Trofa [por 100k hab.]\"\n      theme={themeYellow}\n    />,\n    <DefaultLineChart\n      data={northEntries}\n      dateRange={dateRange}\n      label=\"Casos novos no Norte\"\n      theme={themeYellow}\n    />,\n    <DefaultLineChart\n      data={ptEntries.newConfirmedPt}\n      dateRange={dateRange}\n      label=\"Casos novos em Portugal\"\n      theme={themeYellow}\n    />\n  );\n}\n\nNewCasesCharts.propTypes = {\n  trofaEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  northEntries: PropTypes.arrayOf(PropTypes.instanceOf(Entry)).isRequired,\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default NewCasesCharts;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport Entry from '../../model/Entry';\nimport { getEntriesSince, getChartOptions, getMultipleChartData } from '../../utils/chartUtils';\n\nconst MultiLineChart = ({ dataArray, dateRange, labels, themes, zeroBased }) => {\n  const lastNEntriesArray = dataArray.map(d=>getEntriesSince(dateRange, d));\n  const lastEntriesFlat = lastNEntriesArray.flatMap(eArr=>eArr.map(e=>e.count));\n  const min = Math.min(...lastEntriesFlat);\n  const max = Math.max(...lastEntriesFlat);\n  const offset = Math.max((max - min)/20, zeroBased ? 4 : 2);\n\n  const suggestedMax = Math.round(max + offset);\n\n  let suggestedMin = Math.round(min - offset);\n  if(zeroBased) suggestedMin = Math.max(suggestedMin, 0);\n  console.log(lastEntriesFlat);\n  console.log(`${suggestedMin}, ${suggestedMax}`);\n\n  if(dataArray.length !== labels.length || labels.length !== themes.length) {\n    console.error('Chart arguments cardinality did not match!');\n    return <Line options={getChartOptions(false, suggestedMin, suggestedMax)}/>\n  }\n  return (\n    <Line\n      data={getMultipleChartData(lastNEntriesArray, labels, themes)}\n      options={getChartOptions(zeroBased, suggestedMin, suggestedMax)}\n    />\n  );\n}\n\nMultiLineChart.propTypes = {\n  dataArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.instanceOf(Entry))).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  labels: PropTypes.arrayOf(PropTypes.string.isRequired),\n  themes: PropTypes.arrayOf(PropTypes.object.isRequired),\n  zeroBased: PropTypes.bool,\n};\n\nMultiLineChart.defaultProps = {\n  zeroBased: true,\n  dateRange: 0,\n};\n\nexport default MultiLineChart;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\nimport { chartGroupWrapper } from \"../utils/chartUtils\";\nimport DefaultLineChart from \"./templates/DefaultLineChart\";\nimport MultiLineChart from \"./templates/MultiLineChart\";\nimport { themeMagenta, themeMagentaDark, themeMagentaLight } from \"../config/themes\";\nimport PortugalEntries from \"../model/PortugalEntries\";\n\nconst GeneralCharts = ({ ptEntries, dateRange, classes }) => {\n  return chartGroupWrapper('Casos ativos', classes,\n    <DefaultLineChart\n      data={ptEntries.activePt}\n      dateRange={dateRange}\n      label=\"Casos ativos em Portugal\"\n      theme={themeMagenta}\n      zeroBased={true}\n    />,\n    <MultiLineChart\n      dataArray={[ptEntries.hospitalized, ptEntries.hospitalizedIcu]}\n      dateRange={dateRange}\n      labels={[\"Internados em Portugal\", \"Internados em UCI em Portugal\"]}\n      themes={[themeMagentaLight, themeMagentaDark]}\n      zeroBased={true}\n    />\n  );\n}\n\nGeneralCharts.propTypes = {\n  ptEntries: PropTypes.instanceOf(PortugalEntries).isRequired,\n  dateRange: PropTypes.number.isRequired,\n  classes: PropTypes.any.isRequired,\n};\n\nexport default GeneralCharts;\n","import React, { useState, useEffect } from 'react';\nimport { AppBar, CircularProgress, FormControl, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport PortugalEntries from './model/PortugalEntries';\nimport Entry from './model/Entry';\nimport { getTownData, getPortugalData } from './utils/fetchData';\nimport NewCasesCharts from './chart/NewCasesCharts';\nimport { derivateEntryValues } from './utils/chartUtils';\nimport GeneralCharts from './chart/GeneralCharts';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    'backgroundColor': '#f5f5f5',\n    flexGrow: 1,\n    display: 'flex',\n    'align-items': 'center',\n    'justify-content': 'center',\n    padding: 15,\n    paddingRight: 30,\n  },\n  chartContainer: {\n    position: 'relative',\n    margin: 'auto',\n    height: '50vh',\n    width: '90vw',\n  },\n  progress: {\n    float: 'none',\n    margin: '0 auto',\n  },\n  appBar: {\n    maxWidth: 170,\n    marginBottom: 20,\n    backgroundColor: '#e0e0e0',\n  },\n  formControl: {\n    margin: 10,\n    // minWidth: 120,\n  },\n}));\n\nconst App: () => JSX.Element = (): JSX.Element => {\n  const classes = useStyles();\n  const [isFetching, setIsFetching]: [boolean, Function] = useState(true);\n  const [dateRange, setDateRange]: [number, Function] = useState(90);\n\n  const [trofaNewEntries, setTrofaEntries]: [Entry[], Function] = useState([]);\n  const [ptEntries, setPtEntries]: [PortugalEntries, Function] = useState(new PortugalEntries());\n\n  let lastTownUpdate: string = \"\";\n  let lastPtUpdate: string = \"\";\n  let northNewEntries: Entry[] = [];\n\n\n  if(!isFetching) {\n    lastTownUpdate = trofaNewEntries[trofaNewEntries.length-1].dateStr;\n    lastPtUpdate = ptEntries.confirmedPt[ptEntries.confirmedPt.length -1].dateStr;\n    northNewEntries = derivateEntryValues(ptEntries.confirmedNorth);\n  }\n\n  useEffect(() => {\n    getTownData('TROFA', setTrofaEntries);\n    getPortugalData(setPtEntries);\n  }, []);\n  \n  if(isFetching && trofaNewEntries.length > 0 && ptEntries.confirmedPt.length > 0)\n    setIsFetching(false);\n\n  return (\n    <div className={classes.root}>\n    { isFetching\n      ? <CircularProgress className={classes.progress} />\n      : <div>\n        <AppBar position=\"sticky\" className={classes.appBar}>\n        <FormControl className={classes.formControl}>\n        <InputLabel id=\"time-label\">Tempo</InputLabel>\n        <Select\n          labelId=\"time-label\"\n          id=\"time-select\"\n          value={dateRange}\n          onChange={e => setDateRange(e.target.value)}\n        >\n          <MenuItem value={30}>30 dias</MenuItem>\n          <MenuItem value={90}>90 dias</MenuItem>\n          <MenuItem value={999999}>Desde sempre</MenuItem>\n        </Select>\n        </FormControl>\n        </AppBar>\n\n        <Card>\n          <CardContent>\n            <Typography variant=\"body2\" component=\"p\">\n              A última atualização destes dados ocorreu nas seguintes datas: {`Portugal/Norte => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.\n              <br/>\n              {/*The last update on this data occurred at the following times: {`Portugal/North => ${lastPtUpdate}, Trofa => ${lastTownUpdate}`}.*/}\n            </Typography>\n          </CardContent>\n        </Card>\n\n        <br/>\n        <GeneralCharts ptEntries={ptEntries} dateRange={dateRange} classes={classes} />\n        <br/>\n        <NewCasesCharts trofaEntries={trofaNewEntries} dateRange={dateRange} northEntries={northNewEntries} ptEntries={ptEntries} classes={classes} />\n        <br/>\n\n        <Card>\n          <CardContent>\n            <Typography variant=\"body2\" component=\"p\">\n              Os dados aqui apresentados são extraídos do repositório <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a>.\n              <br/>\n              O código para este dashboard pode ser consultado <a href=\"https://github.com/DiogoDuque/covid19TrofaGraph\">aqui</a>.\n              <br/>\n              {/*The data hereby presented is extracted from the <a href=\"https://github.com/dssg-pt/covid19pt-data\">dssg-pt/covid19pt-data</a> repository.*/}\n            </Typography>\n          </CardContent>\n        </Card>\n      </div>\n    }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}